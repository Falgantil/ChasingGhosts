<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sharp2D.Engine</name>
    </assembly>
    <members>
        <member name="T:Sharp2D.Engine.Bootstrapping.DefaultGameBootstrapper">
            <summary>
            A default GameBootstrapper that does absolutely nothing regarding platform registration. Probably not a class you'd use for anything but PoCs.
            </summary>
            <seealso cref="!:GameBootstrapper" />
        </member>
        <member name="M:Sharp2D.Engine.Bootstrapping.DefaultGameBootstrapper.RegisterServices">
            <summary>
            Registers all the platform-dependant services.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.Predefined.EventValueAnimator">
            <summary>
            A basic value animator that invokes <see cref="E:Sharp2D.Engine.Common.Components.Animations.Predefined.EventValueAnimator.ValueUpdated"/> every time the value updates.
            Use this if you want to make a very simple animation that doesn't need an inheriting class.
            </summary>
            <seealso cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator" />
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.EventValueAnimator.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.Predefined.EventValueAnimator"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.EventValueAnimator.UpdateValue(System.Single)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="E:Sharp2D.Engine.Common.Components.Animations.Predefined.EventValueAnimator.ValueUpdated">
            <summary>
            Occurs when the animating value is changed.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation">
            <summary>
            A default scale animation that animates the parents scale between 2 values.
            </summary>
            <seealso cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator" />
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation.destinationScale">
            <summary>
            The destination scale
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation.startScale">
            <summary>
            The start scale
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation.#ctor(System.TimeSpan,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="startScale">The start scale.</param>
            <param name="destinationScale">The destination scale.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation.Stop">
            <summary>
            Stops this value animator and resets all values.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.ScaleAnimation.UpdateValue(System.Single)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation">
            <summary>
            Animates through all frames in a SpriteSheet over the duration specified.
            </summary>
            <seealso cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator" />
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation.#ctor(Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.Int32},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation"/> class.
            </summary>
            <param name="assetName">Name of the asset.</param>
            <param name="size">The size.</param>
            <param name="count">The count.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation.EndIndex">
            <summary>
            Gets or sets the end index.
            </summary>
            <value>
            The end index.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation.Sprite">
            <summary>
            The Sprite
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.SpriteSheetAnimation.UpdateValue(System.Single)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator">
            <summary>
            Animates movement between the Start and Destination Vector2 positions.
            </summary>
            <seealso cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator" />
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>
            The destination.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator.#ctor(System.TimeSpan,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator.Animate(Sharp2D.Engine.Common.ObjectSystem.GameObject,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.TimeSpan,System.Nullable{Sharp2D.Engine.Common.Components.Animations.AnimationEase})">
            <summary>
            Creates an instance of <see cref="T:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator"/> that gets attached to 
            <see cref="!:parent"/>, animates for the duration specified, and removes itself again.
            </summary>
            <param name="parent">The parent.</param>
            <param name="start">The start.</param>
            <param name="dest">The dest.</param>
            <param name="duration">The duration.</param>
            <param name="easing">The easing.</param>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.TranslationAnimator.UpdateValue(System.Single)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator">
            <summary>
            Animates the transparency of a specific texture between the two values specified.
            Optionally specify a bounds, if you wish to stretch the texture.
            </summary>
            <seealso cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator" />
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.texture">
            <summary>
            The texture
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.minTransparency">
            <summary>
            The minimum transparency
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.maxTransparency">
            <summary>
            The maximum transparency
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.region">
            <summary>
            The region
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.#ctor(System.TimeSpan,Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Single,System.Nullable{Sharp2D.Engine.Common.ObjectSystem.Rectanglef})">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="texture">The texture.</param>
            <param name="minTransparency">The minimum transparency.</param>
            <param name="maxTransparency">The maximum transparency.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this object to the screen.
            <para>
            Does nothing for a value animator.
            </para>
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The game time.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.Predefined.TransparencyAnimator.UpdateValue(System.Single)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.ScaleFunc">
            <summary>
            Takes in progress which is the percentage of the tween complete and returns
            the interpolation value that is fed into the lerp function for the tween.
            </summary>
            <remarks>
            Scale functions are used to define how the tween should occur. Examples would be linear,
            easing in quadratic, or easing out circular. You can implement your own scale function
            or use one of the many defined in the ScaleFuncs static class.
            </remarks>
            <param name="progress">The percentage of the tween complete in the range [0, 1].</param>
            <returns>The scale value used to lerp between the tween's start and end values</returns>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs">
             <summary>
             Defines a set of premade scale functions for use with tweens.
             </summary>
             <remarks>
             To avoid excess allocations of delegates, the public members of ScaleFuncs are already
             delegates that reference private methods.
            
             Implementations based on http://theinstructionlimit.com/flash-style-tweeneasing-functions-in-c
             which are based on http://www.robertpenner.com/easing/
             </remarks>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.Linear">
            <summary>
            A linear progress scale function.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuadraticEaseIn">
            <summary>
            A quadratic (x^2) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuadraticEaseOut">
            <summary>
            A quadratic (x^2) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuadraticEaseInOut">
            <summary>
            A quadratic (x^2) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.CubicEaseIn">
            <summary>
            A cubic (x^3) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.CubicEaseOut">
            <summary>
            A cubic (x^3) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.CubicEaseInOut">
            <summary>
            A cubic (x^3) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuarticEaseIn">
            <summary>
            A quartic (x^4) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuarticEaseOut">
            <summary>
            A quartic (x^4) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuarticEaseInOut">
            <summary>
            A quartic (x^4) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuinticEaseIn">
            <summary>
            A quintic (x^5) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuinticEaseOut">
            <summary>
            A quintic (x^5) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.QuinticEaseInOut">
            <summary>
            A quintic (x^5) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SexticEaseIn">
            <summary>
            A sextic (x^6) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SexticEaseOut">
            <summary>
            A sextic (x^6) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SexticEaseInOut">
            <summary>
            A sextic (x^6) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SepticEaseIn">
            <summary>
            A septic (x^7) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SepticEaseOut">
            <summary>
            A septic (x^7) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SepticEaseInOut">
            <summary>
            A septic (x^7) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SineEaseIn">
            <summary>
            A sinusoidal progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SineEaseOut">
            <summary>
            A sinusoidal progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ScaleFuncs.SineEaseInOut">
            <summary>
            A sinusoidal progress scale function that eases in and out.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator">
            <summary>
                A basic value animator. Animates a <see cref="T:System.Single" /> value from 0 to 1 over the duration, and optionally loops,
                starting from 0 again.
                <para>
                    <see cref="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Start" /> to start it, <see cref="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Stop" /> to stop it. Implement <see cref="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.UpdateValue(System.Single)" /> to use
                    the animated value.
                </para>
            </summary>
            <seealso cref="T:Sharp2D.Engine.Common.Components.Component" />
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.currentTime">
            <summary>
                The current time
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator"/> class.
            </summary>
            <param name="time">
            The time.
            </param>
            <param name="loop">
            if set to <c>true</c> [loop].
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator"/> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Loop">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator" /> is loop.
            </summary>
            <value>
                <c>true</c> if loop; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Percentage">
            <summary>
                Gets the most recent percentage (Number from 0 to 1).
            </summary>
            <value>
                The percentage.
            </value>
        </member>
        <member name="E:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Finished">
            <summary>
            Occurs when the animation finished.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Inverse">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Sharp2D.Engine.Common.Components.Animations.ValueAnimator"/> is inverse.
            <para>Simply whether the value goes from 0 to 1, or 1 to 0. Really simple, and really neat :)</para>
            </summary>
            <value>
              <c>true</c> if inverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Start">
            <summary>
                Starts this value animator. From now on, every <see cref="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Update(Microsoft.Xna.Framework.GameTime)" /> call will invoke <see cref="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.UpdateValue(System.Single)" />.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Stop">
            <summary>
                Stops this value animator and resets all values.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Easing">
            <summary>
            Gets or sets the easing.
            </summary>
            <value>
            The easing.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. This is where you want to handle your logic.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.ApplyEasing(System.Single)">
            <summary>
            Applies the defined Easing effect to the value.
            </summary>
            <param name="percentage">The percentage.</param>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this object to the screen.
                <para>
            Does nothing for a value animator.
                </para>
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.UpdateValue(System.Single)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Animations.ValueAnimator.PlayAnimation(Sharp2D.Engine.Common.ObjectSystem.GameObject,System.Action{System.Single},System.TimeSpan)">
            <summary>
            Creates and play a basic animation that invokes <see cref="!:valueChanged"/> 
            every time the animated value changes over the <see cref="!:duration"/> specified.
            </summary>
            <param name="parent">The parent.</param>
            <param name="valueChanged">The value changed.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Sprites.Sprite">
            <summary>
                In-game Sprite. Wraps a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> under the hood.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.Frame">
            <summary>
            Gets the Frame.
            </summary>
            <value>
            The Frame.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.#ctor(System.String,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" /> class.
            </summary>
            <param name="assetName">Name of the asset.</param>
            <param name="region">The region.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.#ctor(Microsoft.Xna.Framework.Color,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" /> class.
            </summary>
            <param name="fillColor">Color of the fill.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" /> class.
            </summary>
            <param name="rawTexture">A raw 2D texture.</param>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.Height">
            <summary>
                Gets the height of this Sprite.
            <para>Returns 0 if Texture is null</para>
            </summary>
            <value>
                The height.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.SpriteEffect">
            <summary>
                Gets or sets the Sprite effect.
                <para>Used to draw the Sprite in horizontally/vertically flipped</para>
                <para>Default value is <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None" /></para>
            </summary>
            <value>
                The Sprite effect.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.Tint">
            <summary>
                Gets or sets the tint.
            </summary>
            <value>
                The tint.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.Width">
            <summary>
                Gets the width of this Sprite.
            <para>Returns 0 if Texture is null</para>
            </summary>
            <value>
                The width.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>
            The opacity.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.Sprite.TransformOrigin">
            <summary>
            Gets the transform origin.
            </summary>
            <value>
            The transform origin.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.Load(System.String,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Loads a new instance of <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" /> with the given <see cref="!:assetName" />.
            Same as new'ing one up yourself.
            </summary>
            <param name="assetName">Name of the asset.</param>
            <param name="region">The region.</param>
            <param name="scale">The scale.</param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.CenterObject">
            <summary>
            Centers the object, setting its TransformOrigin to 50% of its Sprite.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The game time.</param>
            <exception cref="T:System.NotSupportedException">Use the overloads.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws this Sprite to the passed <see cref="!:batch" />.
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The time.</param>
            <param name="position">The position.</param>
            <param name="tint">The tint.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="scale">The scale.</param>
            <param name="effects">The effects.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws this Sprite to the passed <see cref="!:batch" />.
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The time.</param>
            <param name="position">The position.</param>
            <param name="tint">The tint.</param>
            <param name="rotation">The rotation.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws this Sprite to the passed <see cref="!:batch" />.
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The time.</param>
            <param name="position">The position.</param>
            <param name="tint">The tint.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.Sprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. This is where you want to handle your logic.
            <para>Does nothing for this instance.</para>
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1">
            <summary>
            Sprite sheet container. Load in a Sprite sheet / Sprite atlas / tile map, and pass
            in the region to use when drawing. Simple as fuck.
            </summary>
            <typeparam name="TSpriteKey">The type of the Sprite key.</typeparam>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.RegionKey">
            <summary>
                Gets or sets the current region key.
            </summary>
            <value>
                The region key.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.Regions">
            <summary>
            Gets the regions used for drawing a specific part of the underlying Sprite Sheet.
            </summary>
            <value>
            The regions.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.Width">
            <summary>
            Gets the width of a single Sprite. Same as in <see cref="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.SpriteSize" />.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.Height">
            <summary>
            Gets the height of a single Sprite. Same as in <see cref="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.SpriteSize" />.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.SpriteSize">
            <summary>
            Gets the size of the sprite.
            </summary>
            <value>
            The size of the sprite.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Sprites.SpriteSheet`1.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Draws this Sprite to the underlying <see cref="!:batch" />
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The time.</param>
            <param name="position">The position.</param>
            <param name="tint">The tint.</param>
            <param name="rotation">The rotation.</param>
            <param name="scale">The scale.</param>
            <param name="effects">The effects.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Audio.AudioEffect">
            <summary>
                A general audio component that can manage a single audio instance.
                Technically this could be used for any sound effect.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Audio.AudioEffect.LastState">
            <summary>
                The last state.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Audio.AudioEffect.SoundEffect">
            <summary>
                The sound effect.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Audio.AudioEffect.SoundEffectInstance">
            <summary>
                The sound effect instance.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.Audio.AudioEffect.assetName">
            <summary>
                The asset name.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Audio.AudioEffect"/> class.
            </summary>
            <param name="assetName">
            Name of the asset.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Audio.AudioEffect" /> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Paused">
            <summary>
                Occurs when this audio effect is paused.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Resumed">
            <summary>
                Occurs when this audio effect is resumed.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Stopped">
            <summary>
                Occurs when this audio effect is stopped.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Audio.AudioEffect.AssetName">
            <summary>
                Gets or sets the name of the asset.
                <para>Setting this will also load the audio effect.</para>
            </summary>
            <value>
                The name of the asset.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Pitch">
            <summary>
                Gets or sets the pitch.
                <para>Default value is 0</para>
            </summary>
            <value>
                The pitch.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Volume">
            <summary>
                Gets or sets the volume of the sound effect.
                <para>Goes from 0-1. Default is 1</para>
            </summary>
            <value>
                The volume.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Audio.AudioEffect.IsPlaying">
            <summary>
            Gets a value indicating whether this instance is playing.
            </summary>
            <value>
            <c>true</c> if this instance is playing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Load(System.String)">
            <summary>
            Loads and returns a new instance of <see cref="T:Sharp2D.Engine.Common.Components.Audio.AudioEffect"/>, using audio loaded from the specified path.
            </summary>
            <param name="path">
            The content path.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.Components.Audio.AudioEffect"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            You cannot draw an audio effect, dummy.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Play(System.Boolean)">
            <summary>
            Starts playing the loaded audio.
            </summary>
            <param name="loop">
            if set to <c>true</c> loops the audio until manually stopped. Useful for background music or similar.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Stop(System.Boolean)">
            <summary>
            Stops the specified immediate.
            </summary>
            <param name="immediate">
            if set to <c>false</c> will not stop the audio until it has finished.
                <para>
            This is used when looping sound effects
                </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            SoundEffectInstance;You cannot stop a sound effect that isn't playing!
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Audio.AudioEffect.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every frame. Makes sure to keep track of the audios state, and fires any appropriate events.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.ChildComponents">
            <summary>
                A collection of ChildComponents, always connected to any <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject" /> that has been created.
                This is where you would usually add things such as Sprites, Audio, or other features you'd say would qualify as a
                component.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Components.ChildComponents.components">
            <summary>
                The _components.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.#ctor(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.ChildComponents"/> class.
            </summary>
            <param name="owner">
            The parent.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.ChildComponents" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.ChildComponents.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.ChildComponents.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.ChildComponents.Owner">
            <summary>
                Gets or sets the parent of this <see cref="T:Sharp2D.Engine.Common.Components.ChildComponents" /> collection.
            </summary>
            <value>
                The parent.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.ChildComponents.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.Components.Component"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.Add(Sharp2D.Engine.Common.Components.Component)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.Contains(Sharp2D.Engine.Common.Components.Component)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.CopyTo(Sharp2D.Engine.Common.Components.Component[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            Index of the array.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.IndexOf(Sharp2D.Engine.Common.Components.Component)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.Insert(System.Int32,Sharp2D.Engine.Common.Components.Component)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.Remove(Sharp2D.Engine.Common.Components.Component)">
            <summary>
            Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if
                <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.ChildComponents.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.Component">
            <summary>
            A basic component. Anything that needs to be attached to a specific object, 
            but isn't actually another game object, would be a component.
            <para>Audio, Sprite, Animation, (In relation to player character:) Inventory, Statistics, etc.</para>
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Component.#ctor(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Component"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Component.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.Component" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Component.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Component.Name">
            <summary>
                Gets or sets the name.
                <para>
                    Used for identifying objects, as well as targeting a specific component by name. MAKE IT UNIQUE.
                    If you don't, any code targeting the Name, will use the first (unless you're looping,
                    in which case it will run on all components with this name. You get the idea.)
                </para>
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Components.Component.Parent">
            <summary>
            Gets or sets the parent object.
            <para>REQUIRED! If this is not set, you'll get an exception in initialize. Seriously, just pass the damn parent >_></para>
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Component.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Initializes this component.
            </summary>
            <param name="resolver"></param>
            <exception cref="T:Sharp2D.Engine.Common.Components.MissingParentException"></exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Component.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. This is where you want to handle your logic.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.Component.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The game time.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Components.MissingParentException">
            <summary>
                Thrown in the event that a component does not have a Parent.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Components.MissingParentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Components.MissingParentException"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.WorldAlreadyContainsBodyException">
            <summary>
                The world already contains body exception.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.WorldAlreadyContainsBodyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.WorldAlreadyContainsBodyException" /> class.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException">
            <summary>
                The development mishap exception.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException">
            <summary>
                An exception that is thrown when attempting to add an object to a collection that allows the specific object in
                terms of syntax, but not runtime.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException" /> class.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="P:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException.VariableName">
            <summary>
            Gets or sets the name of the variable that caused this exception.
            </summary>
            <value>
            The name of the variable.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.InvalidGameComponentHierarchyException">
            <summary>
                The invalid game component hierarchy exception.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Exceptions.InvalidGameComponentHierarchyException._message">
            <summary>
                The _message.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.InvalidGameComponentHierarchyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.InvalidGameComponentHierarchyException" /> class.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.InvalidGameObjectHierachyException">
            <summary>
                Occurs when attempting to add a parent as a child of it's own child.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Exceptions.InvalidGameObjectHierachyException._message">
            <summary>
                The _message.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.InvalidGameObjectHierachyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.InvalidGameObjectHierachyException" /> class.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.MultipleSpriteTypesException">
            <summary>
                The multiple Sprite types exception.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.MultipleSpriteTypesException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.MultipleSpriteTypesException" /> class.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Exceptions.ServiceNotFoundException`1">
            <summary>
            Service Not Found exception.
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="F:Sharp2D.Engine.Common.Exceptions.ServiceNotFoundException`1._message">
            <summary>
                The _message.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Exceptions.ServiceNotFoundException`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Exceptions.ServiceNotFoundException`1" /> class.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.GameCreatedArgs">
            <summary>
                Game Created event args.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.GameCreatedArgs.#ctor(Sharp2D.Engine.Common.SharpGameManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.GameCreatedArgs"/> class.
            </summary>
            <param name="game">
            The game.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.GameCreatedArgs.GameManager">
            <summary>
                Gets or sets the game.
            </summary>
            <value>
                The game.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.GameCreated">
            <summary>
                Game Created event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction">
            <summary>
                Describes what happend to the child that was moved.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Added">
            <summary>
                The added.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Removed">
            <summary>
                The removed.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Inserted">
            <summary>
                The inserted.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.GameObjectMoved">
            <summary>
                Delegate used for notifying of a game object hierachy change.
            </summary>
            <param name="sender">The game object that is the parent of the child that was moved.</param>
            <param name="args">The arguments - contains information about the action as well as the new parent.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.ComponentMoved">
            <summary>
            Delegate used for notifying of a game object hierachy change.
            </summary>
            <param name="sender">The game object that is the parent of the child that was moved.</param>
            <param name="args">The arguments - contains information about the action as well as the new parent.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs">
            <summary>
                Child Object Moved event arguments.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.#ctor(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs"/> class.
            </summary>
            <param name="child">
            The child.
            </param>
            <param name="newParent">
            The new parent.
            </param>
            <param name="oldParent">
            The old parent.
            </param>
            <param name="action">
            The action.
            </param>
            <param name="index">
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.Action">
            <summary>
                Gets the move operation's action.
            </summary>
            <value>
                The action.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.Child">
            <summary>
                Gets the child that was moved.
            </summary>
            <value>
                The child.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.Index">
            <summary>
                Gets or sets the index of
                the <see cref="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Inserted" /> <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.Child" />
                in <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.NewParent" />.
            </summary>
            <value>
                The index. Will be -1 if <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.Action" /> is not <see cref="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Inserted" />.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.NewParent">
            <summary>
                Gets or sets the new parent.
            </summary>
            <value>
                The new parent.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs.OldParent">
            <summary>
                Gets or sets the old parent.
            </summary>
            <value>
                The old parent.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs">
            <summary>
                Child Component Moved event arguments.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.#ctor(Sharp2D.Engine.Common.Components.Component,Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs"/> class.
            </summary>
            <param name="child">
            The child.
            </param>
            <param name="newParent">
            The new parent.
            </param>
            <param name="oldParent">
            The old parent.
            </param>
            <param name="action">
            The action.
            </param>
            <param name="index">
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.Action">
            <summary>
                Gets the move operation's action.
            </summary>
            <value>
                The action.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.Child">
            <summary>
                Gets the child that was moved.
            </summary>
            <value>
                The child.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.Index">
            <summary>
                Gets or sets the index of
                the <see cref="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Inserted" /> <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.Child" />
                in <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.NewParent" />.
            </summary>
            <value>
                The index. Will be -1 if <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.Action" /> is not <see cref="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjectMoveAction.Inserted" />.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.NewParent">
            <summary>
                Gets or sets the new parent.
            </summary>
            <value>
                The new parent.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs.OldParent">
            <summary>
                Gets or sets the old parent.
            </summary>
            <value>
                The old parent.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate">
            <summary>
                Surrogate for JSON serialization. Should not be used in games.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate.#ctor(System.Collections.Generic.IEnumerable{Sharp2D.Engine.Common.ObjectSystem.GameObject},Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate"/> class.
            </summary>
            <param name="items">
            The items.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate.Items">
            <summary>
                Gets or sets the items.
            </summary>
            <value>
                The items.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate.Owner">
            <summary>
                Gets or sets the owner.
            </summary>
            <value>
                The owner.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildrenSurrogate.Unwrap">
            <summary>
                Unwraps this instance.
            </summary>
            <returns>
                The <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects" />.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects">
            <summary>
                Child Objects collection. All of the <see cref="T:IList" /> methods that manipulate the
                underlying collection will check for parent-child compatibility and possible
                hierarchical conflicts.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.IncompatibleChildGenericError">
            <summary>
                The incompatible child generic error
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.list">
            <summary>
                The underlying list.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.#ctor(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="initialChildren">The initial children.</param>
            <exception cref="T:System.ArgumentNullException">owner;Make sure that the object you're trying to deserialize, has a
            public parameterless constructor!</exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Owner">
            <summary>
                Gets or sets the owner of this collection.
            </summary>
            <value>
                The owner.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Setting by index is not supported.
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Add(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <exception cref="T:Sharp2D.Engine.Common.Exceptions.InvalidGameObjectHierachyException">
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Clear">
            <summary>
                Removes all game objects from this collection.
            </summary>
            <remarks>
                CAUTION! This is NOT recursive!
            </remarks>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Contains(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.CopyTo(Sharp2D.Engine.Common.ObjectSystem.GameObject[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            Index of the array.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.IndexOf(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects"/>.
            </param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Insert(System.Int32,Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Inserts an item to the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index
            </exception>
            <exception cref="T:Sharp2D.Engine.Common.Exceptions.InvalidGameObjectHierachyException">
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Remove(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if
                <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects"/> item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.SetupHierachy(System.Collections.Generic.IEnumerable{Sharp2D.Engine.Common.ObjectSystem.GameObject})">
            <summary>
            Sets up the initial hierachy when constructed with GameObject params.
                In other words: Set's the parent-child relationships up.
            </summary>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.ThrowIfNotValidChild(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Throws if the child is not a valid child of <see cref="P:Sharp2D.Engine.Common.ObjectSystem.ChildObjects.Owner"/>.
            </summary>
            <param name="item">
            The item.
            </param>
            <exception cref="T:Sharp2D.Engine.Common.Exceptions.IncompatibleChildException">
            </exception>
        </member>
        <member name="T:Sharp2D.Engine.Common.ObjectSystem.GameObject">
            <summary>
                Game Object, all objects that are to be drawn in the game should inherit from this bad boii.
            </summary>
            <remarks>
                If you are drawing a UI, you probably don't want to inherit from this.
            </remarks>
        </member>
        <member name="F:Sharp2D.Engine.Common.ObjectSystem.GameObject.ActualParent">
            <summary>
                The actual parent, serving as a backing field for <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Parent" />
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject" /> class.
            </summary>
            <param name="localPosition">The local position. This is the offset from the parent global position.</param>
            <param name="sprite">The texture.</param>
            <param name="children">The children.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.#ctor(Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject" /> class.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject" /> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.ObjectSystem.GameObject.ChildObjectMoved">
            <summary>
                Occurs when a child object is moved.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.ObjectSystem.GameObject.ChildComponentMoved">
            <summary>
                Occurs when a child object is moved.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Components">
            <summary>
            Gets or sets the components.
            </summary>
            <value>
            The components.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Count">
            <summary>
            Gets the number of elements contained in <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" />.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.GlobalPosition">
            <summary>
            Gets the global position of this object within the scene.
            </summary>
            <value>
            The global position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.GlobalRegion">
            <summary>
                Gets the region/area of this Game Object. This is (usually) the width and height of the texture
                to be drawn, and the global position. Override for custom behavior.
            </summary>
            <value>
                The region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.GlobalRotation">
            <summary>
                Gets the global rotation in the scene.
            </summary>
            <value>
                The global rotation.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.GlobalScale">
            <summary>
            Gets the global scale.
            </summary>
            <value>
            The global scale.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Height">
            <summary>
            Gets the height of the underlying texture (or 0 if Sprite is null).
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.IsReadOnly">
            <summary>
            Gets a value indicating whether <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children"/> is read-only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.LocalPosition">
            <summary>
                Gets or sets the local position relative to it's parent object.
            </summary>
            <value>
                The local position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.LocalRegion">
            <summary>
            Gets the region/area of this Game Object. This is (usually) the <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Width" /> and <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Height" /> of the texture
            to be drawn, and the <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.LocalPosition" />. Override for custom behavior.
            </summary>
            <value>
            The local region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.LocalRotation">
            <summary>
                Gets or sets the rotation in degrees.
            </summary>
            <value>
                The rotation.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.LocalScale">
            <summary>
                Gets or sets the local scale.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Name">
            <summary>
                Gets or sets the name of this Game Object. This is not required. At all.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Parent">
            <summary>
                Gets or sets the parent.
            </summary>
            <value>
                The parent.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Sprite">
            <summary>
            Gets or sets the Sprite texture.
            </summary>
            <value>
            The Sprite texture.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Width">
            <summary>
                Gets the width of the underlying texture (or 0 if Sprite is null).
            </summary>
            <value>
                The width.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Item(System.Int32)">
            <summary>
            Gets or sets the game object at the specified index (From the <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children"/> collection).
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.V2(System.Single,System.Single)">
            <summary>
            Helper to create a Vector2
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Add(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Adds an item to the <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" /> collection.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Contains(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.CopyTo(Sharp2D.Engine.Common.ObjectSystem.GameObject[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws all <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Components" />, then all <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" />.
            If you override this method, you are responsible for calling base <see cref="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)" />
            if you want it to draw children as well.
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The time.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.IndexOf(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Initializes this specific game object.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Resolver">
            <summary>
            Gets the resolver.
            </summary>
            <value>
            The resolver.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Insert(System.Int32,Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Inserts a game object to the <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children"/> collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.IsChildValid(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines whether the specified child is a valid child for this game object.
            </summary>
            <param name="child">
            The child.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the gameobject the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> distance.
            </summary>
            <param name="distance">Distance in <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Move(System.Single,System.Single)">
            <summary>
            This is a shortcut for wrapping X and Y in a vector 2 and running
            <see cref="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Move(Microsoft.Xna.Framework.Vector2)" />
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.MoveDelta(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.GameTime,System.Single)">
            <summary>
            Moves the game object the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> distance over the given <see cref="!:duration" />.
            <example>Will move the object 500 units, if Distance is 250, and time is 0.5 seconds. Or 250, if Distance is 500, and duration is 2 seconds. You get the idea.</example>
            </summary>
            <param name="distance">Distance to move over specified time.</param>
            <param name="time">Game Time manager.</param>
            <param name="duration">Duration in floating point Seconds.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.MoveDelta(System.Single,System.Single,Microsoft.Xna.Framework.GameTime,System.Single)">
            <summary>
            This is a shortcut for wrapping X and Y in a vector 2 and running
            <see cref="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.MoveDelta(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.GameTime,System.Single)" />
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="time">Game Time manager.</param>
            <param name="duration">Duration in decimal Seconds.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Remove(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" />.
            </summary>
            <param name="item">The object to remove from the <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the
            <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" />; otherwise, false. This method also returns false if
            <paramref name="item" /> is not found in the original <see cref="P:Sharp2D.Engine.Common.ObjectSystem.GameObject.Children" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.RemoveAt(System.Int32)">
            <summary>
            Removes the child object at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this GameObject.
            <example>RandomObject (Local X: 25.89385, Local Y: 68.23847)</example>
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this object. On <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/>, does nothing.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.DoInitialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Internal initialize call. Called only by internal classes, obviously.
            Ensures all children and child components are initialized.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.DoUpdate(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Internal update method. Ensures all children are updated as well.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.DoDraw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Internal draw call. Called only by internal classes, obviously.
            Ensures all children and child components are drawn, but only if .
            </summary>
            <param name="batch">The batch.</param>
            <param name="time">The time.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.OnChildObjectMoved(Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs)">
            <summary>
            Called when a child object has been moved.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.OnChildComponentMoved(Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs)">
            <summary>
            Called when a child component has been moved.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.GetGlobalPosition">
            <summary>
            Gets the global position of this object.
            </summary>
            <returns>
            Returns a Vector2, representing the position in World coordinates.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.GetGlobalRotation">
            <summary>
            Gets the global rotation of this object.
            </summary>
            <returns>
            The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.GetGlobalRegion">
            <summary>
            Gets the global region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.GetGlobalScale">
            <summary>
            Gets the global scale.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.GetLocalRegion">
            <summary>
            Gets the local region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.SetParent(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Sets the parent of this game object, ensuring all references are up to date.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            If <see cref="!:value" /> is null,
            the current parent (if any) will remove the reference to this from it's child collection.
            </remarks>
        </member>
        <member name="T:Sharp2D.Engine.Common.GameTimer">
            <summary>
                A basic timer that executes after a set delay. Useful for a lot of stuff.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.GameTimer.suppressRedundantUpdates">
            <summary>
                The _suppress redundant updates.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.GameTimer.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.GameTimer"/> class.
            </summary>
            <param name="duration">
            The duration.
            </param>
            <param name="suppressRedundantUpdates">
            The suppress redundant updates.
            </param>
        </member>
        <member name="E:Sharp2D.Engine.Common.GameTimer.Expired">
            <summary>
                The expired.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.GameTimer.Duration">
            <summary>
                Gets the duration.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.GameTimer.Finished">
            <summary>
                Gets a value indicating whether finished.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.GameTimer.Remaining">
            <summary>
                Gets the remaining.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.GameTimer.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            The draw.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.GameTimer.Restart">
            <summary>
                The restart.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.GameTimer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The update.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
            <exception cref="T:Sharp2D.Engine.Common.Exceptions.DevelopmentMishapException">
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.GameTimer.OnExpired">
            <summary>
                The on expired.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.TextboxTriggeredEventArgs">
            <summary>
                The textbox triggered event args.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.TextboxTriggeredEventHandlerArgs">
            <summary>
                Fired when a button has been triggered (e.g left-mouse-button click)
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">
                The <see cref="T:Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventHandler">
            <summary>
                Fired when a button has been triggered (e.g left-mouse-button click)
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">
                The <see cref="T:Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventArgs">
            <summary>
                Button Triggered Event Args.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs">
            <summary>
                Slider Changed Event Args
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">
            The old value.
            </param>
            <param name="newValue">
            The new value.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs.NewValue">
            <summary>
                Gets the new value.
            </summary>
            <value>
                The new value.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs.OldValue">
            <summary>
                Gets the old value.
            </summary>
            <value>
                The old value.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventHandler">
            <summary>
                Fires when a slider changed its value.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">
                The <see cref="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChanged">
            <summary>
                The spinner selection changed.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChangedEventArgs">
            <summary>
                The spinner selection changed event args.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChangedEventArgs.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChangedEventArgs"/> class.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="oldIndex">
            The old index.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChangedEventArgs.Index">
            <summary>
                Gets the index.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChangedEventArgs.OldIndex">
            <summary>
                Gets the old index.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.SpinnerSelectionChangedEventArgs.Value">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs">
            <summary>
                Text Changed Event Args.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs"/> class.
            </summary>
            <param name="oldText">
            The old text.
            </param>
            <param name="newText">
            The new text.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs.NewText">
            <summary>
                Gets the new text.
            </summary>
            <value>
                The new text.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs.OldText">
            <summary>
                Gets the old text.
            </summary>
            <value>
                The old text.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs.UpdatePositioning">
            <summary>
                Gets or sets a value indicating whether the internal code should automatically update the position in the textbox.
            </summary>
            <value>
                <c>true</c> if it should update positioning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Events.TextChangedEventHandler">
            <summary>
                Fired when the text in a textbox has been changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">
                The <see cref="T:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.Button">
            <summary>
                Button UI Control.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Button"/> class and set's the state manager to a
                <see cref="T:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider"/>
            </summary>
            <param name="position">
            </param>
            <param name="sprite">
            </param>
            <param name="children">
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.String},Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Button"/> class and set's the state manager to a
                <see cref="T:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider"/>
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="spriteSheet">
            The Sprite sheet.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.#ctor(Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.UI.Controls.Label)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Button"/> class and sets the <see cref="P:Sharp2D.Engine.Common.UI.Controls.Button.Label"/>
            </summary>
            <param name="texture">
            The texture.
            </param>
            <param name="label">
            The label.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Button" /> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.Button.Triggered">
            <summary>
                Occurs when the button has been triggered. Usually by a left-button mouse click.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Button.Label">
            <summary>
                Gets or sets the label. When setting, the label's parent is set to 'this'.
            </summary>
            <value>
                The label.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.Trigger">
            <summary>
                The trigger.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.HandleTriggerState">
            <summary>
                Does the same as <see cref="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDownState" />, but with trigger state, except there
                is probably no trigger visual state.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.OnTriggered(Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventArgs)">
            <summary>
            Raises the <see cref="E:Sharp2D.Engine.Common.UI.Controls.Button.Triggered"/> event.
            </summary>
            <param name="e">
            The <see cref="T:Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.CenterLabel">
            <summary>
                Repositions the label to appear centered inside the button's region.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Button.SetLabel(Sharp2D.Engine.Common.UI.Controls.Label)">
            <summary>
            Setter for <see cref="P:Sharp2D.Engine.Common.UI.Controls.Button.Label"/>, ensures that we center the label per default.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.CheckBox">
            <summary>
                CheckBox control.
                TODO: Discuss assumed Sprite layout (2 spritesheets or 1?)
                TODO: Bjarke's answer: Let's use 2 spritesheets. This will allow us to reuse the code we already have,
                TODO: and all we'll have to do is add another spritesheet property to this class.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.CheckBox.label">
            <summary>
                The _label.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.CheckBox.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.String},Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Utility.FontDefinition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.CheckBox"/> class.
                Also sets up a default <see cref="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.StateProvider"/>
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="spriteSheet">
            The Sprite sheet.
            </param>
            <param name="checkMarkSprite">
            The check mark Sprite.
            </param>
            <param name="labelFont">
            The label font.
            </param>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.CheckBox.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.CheckBox" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.CheckBox.CheckMarkSprite">
            <summary>
                Gets or sets the check mark Sprite.
            </summary>
            <value>
                The check mark Sprite.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.CheckBox.IsChecked">
            <summary>
                Gets or sets a value indicating whether this checkbox is in the checked state.
            </summary>
            <value>
                <c>true</c> if [checked]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.CheckBox.Label">
            <summary>
                Gets or sets the label.
            </summary>
            <value>
                The label.
            </value>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.CheckBox.CheckedChanged">
            <summary>
            Occurs when [checked].
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.CheckBox.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws a <see cref="!:SpriteSheet"/> if <see cref="!:SpriteType"/> is set to <see cref="!:Enums.SpriteType.Sheet"/>.
                If <see cref="P:Sharp2D.Engine.Common.UI.Controls.CheckBox.IsChecked"/>, also draws the <see cref="P:Sharp2D.Engine.Common.UI.Controls.CheckBox.CheckMarkSprite"/>.
                Calls <see cref="!:InteractableUiControl.Draw"/>.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Check mark Sprite cannot be null.
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.CheckBox.HandleTriggerState">
            <summary>
                Does the same as <see cref="!:HandleDownState" />, but with trigger state, except there
                is probably no trigger visual state.
                Toggles the <see cref="P:Sharp2D.Engine.Common.UI.Controls.CheckBox.IsChecked" /> state on or off.
            </summary>
            <remarks>
                This also handles setting the focus to this control.
                If you want to implement this yourself, don't call base.
            </remarks>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.CheckBox.SetLabel(Sharp2D.Engine.Common.UI.Controls.Label)">
            <summary>
            Sets the label.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.Spinner">
            <summary>
                Spinner control
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Spinner.index">
            <summary>
                The _index.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Spinner.label">
            <summary>
                The _label.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,System.Collections.Generic.List{System.Object},Sharp2D.Engine.Common.UI.Controls.Button,Sharp2D.Engine.Common.UI.Controls.Button,Sharp2D.Engine.Common.UI.Controls.Label,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Spinner"/> class.
            </summary>
            <param name="localPosition">
            The local position.
            </param>
            <param name="mainSprite">
            The main Sprite.
            </param>
            <param name="items">
            The items.
            </param>
            <param name="plusButton">
            The plus button.
            </param>
            <param name="minusButton">
            The minus button.
            </param>
            <param name="label">
            The label.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,System.Collections.Generic.List{System.Object},Sharp2D.Engine.Common.UI.Controls.Button,Sharp2D.Engine.Common.UI.Controls.Button,System.String,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Spinner"/> class.
            </summary>
            <param name="localPosition">
            The local position.
            </param>
            <param name="mainSprite">
            The main Sprite.
            </param>
            <param name="items">
            The items.
            </param>
            <param name="plusButton">
            The plus button.
            </param>
            <param name="minusButton">
            The minus button.
            </param>
            <param name="fontPath">
            The font path.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Spinner" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Spinner.IsFocusable">
            <summary>
                This control is not focusable - the buttons are, though.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Spinner.Items">
            <summary>
                Gets or sets the items. Their ToString method will be called.
            </summary>
            <value>
                The items.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Spinner.Label">
            <summary>
                Gets or sets the label showing the selected item's text.
            </summary>
            <value>
                The label.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Spinner.MinusButton">
            <summary>
                Gets or sets the minus button. Decrements the index when triggered.
            </summary>
            <value>
                The minus button.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Spinner.PlusButton">
            <summary>
                Gets or sets the plus button. Increments the index when triggered.
            </summary>
            <value>
                The plus button.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Spinner.SelectedIndex">
            <summary>
                Gets or sets the index of the selected item.
            </summary>
            <value>
                The index of the selected.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this spinner control.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
                Initializes the spinner.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this control, and runs the update method on all children.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.UpdateControl">
            <summary>
                Updates the control.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.CenterLabel">
            <summary>
                Repositions the label to appear centered inside the button's region.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Spinner.SetLabel(Sharp2D.Engine.Common.UI.Controls.Label)">
            <summary>
            Setter for <see cref="P:Sharp2D.Engine.Common.UI.Controls.Spinner.Label"/>, ensures that we center the label per default.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel">
            <summary>
                Label that displays the current frame rate. Set the <see cref="P:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.Text" />
                yourself, but use {0} for average frame rate, and {1} for actual frame rate.
                Actual frame rate updates once per second.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel"/> class.
            </summary>
            <param name="fontPath">
            The font path.
            </param>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.#ctor(System.String,System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel"/> class.
            </summary>
            <param name="fontPath">
            The font path.
            </param>
            <param name="text">
            The text.
            </param>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.#ctor(Sharp2D.Engine.Utility.FontDefinition,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel"/> class.
            </summary>
            <param name="fontDefinition">
            The font definition.
            </param>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.#ctor(Sharp2D.Engine.Utility.FontDefinition,System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel"/> class.
            </summary>
            <param name="fontDefinition">
            The font definition.
            </param>
            <param name="avgFpsActualFps">
            The avg fps actual fps.
            </param>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.Text">
            <summary>
                Gets or sets the text of the label, should include the formats for the FPS data.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.FrameRateLabel.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the string and calls base.Draw.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl">
            <summary>
                A UI Control that has a hover tint. When the mouse
                enters the region of this control, the HoverTint will be used
                to draw the texture.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl"/> class.
            </summary>
            <param name="position">
            </param>
            <param name="sprite">
            </param>
            <param name="children">
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.String},Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="spriteSheet">
            The Sprite sheet.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.CurrentlyFocusedControl">
            <summary>
                Gets or sets the currently focused control.
            </summary>
            <value>
                The currently focused control.
            </value>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.GotFocus">
            <summary>
            Occurs when [got focus].
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.LostFocus">
            <summary>
            Occurs when [lost focus].
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.GlobalRegion">
            <summary>
                Gets the region/area of this UI control. Overriden to provide different values
                when <see cref="!:SpriteType" /> is set to <see cref="!:Enums.SpriteType.Sheet" />
            </summary>
            <value>
                The region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HasFocus">
            <summary>
                Gets or sets a value indicating whether [has focus].
            </summary>
            <value>
                <c>true</c> if [has focus]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.InteractionState">
            <summary>
                Gets or sets the current user interaction with this control since the last update.
            </summary>
            <value>
                The state of the UI interaction.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.IsFocusable">
            <summary>
                Determines whether this control is focusable.
                Each derived control is responsible for setting it's focus, with an exception to the
                Focus Navigation that is built in to the UI system.
            </summary>
            <value></value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.SpriteRegionIndex">
            <summary>
                Gets or sets the region used for drawing the next frame.
            </summary>
            <value>
                The region index.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.SpriteSheet">
            <summary>
                Gets or sets the Sprite sheet. Only used if
            </summary>
            <remarks>
                We chose to use <see cref="T:System.String" /> as the region index type, as it is the most commonly used in UI state.
            </remarks>
            <value>
                The Sprite sheet.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.StateProvider">
            <summary>
                Gets or sets the state provider for this control.
            </summary>
            <value>
                The state provider.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.Width">
            <summary>
                Gets the width of the underlying texture.
            </summary>
            <value>
                The width.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.Height">
            <summary>
                Gets the height of the underlying texture.
            </summary>
            <value>
                The height.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.SetFocus">
            <summary>
                Sets this control as the currently focused control.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this control, and runs the update method on all children.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDisabledState">
            <summary>
                The handle disabled state.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDownState">
            <summary>
                When this control's state is <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Down" />,
                use the state provider.
                <remarks>
                    When overridden in a derived class, if you do not call base, the state provider will not be called.
                </remarks>
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleFocusState">
            <summary>
                Does the same as <see cref="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDownState" />, but with focus state.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleHoverState">
            <summary>
                Does the same as <see cref="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDownState" />, but with hover state.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleNoneState">
            <summary>
                Does the same as <see cref="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDownState" />, but with none state.
                This is where you do stuff when the user is not doing anything with the control.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleTriggerState">
            <summary>
                Does the same as <see cref="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.HandleDownState" />, but with trigger state, except there
                is probably no trigger visual state.
            </summary>
            <remarks>
                This also handles setting the focus to this control.
                If you want to implement this yourself, don't call base.
            </remarks>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.GetRegion">
            <summary>
                Gets the region of this <see cref="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl" />.
            </summary>
            <remarks>
                If <see cref="!:SpriteType" /> is set to <see cref="!:Enums.SpriteType.Sheet" />, the <see cref="P:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl.SpriteSheet" /> will
                be used.
                If set to <see cref="!:Enums.SpriteType.Single" />, <see cref="T:Sharp2D.Engine.Common.Components.Sprites.Sprite" /> will be used.
            </remarks>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.Label">
            <summary>
                Label control.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.alignment">
            <summary>
                The _alignment.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.localPosition">
            <summary>
                The _local position.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.oldGlobalPos">
            <summary>
                The _old global pos.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.text">
            <summary>
                The _text.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.textLines">
            <summary>
                The _text lines.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.textPositions">
            <summary>
                The _text positions.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Label.updatePosition">
            <summary>
                The _update position.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Label"/> class.
                <remarks>
            This will generate a Font Definition with a default OriginalFontSize of 100, upon <see cref="!:LoadContent"/>
                    execution.
                </remarks>
            </summary>
            <param name="fontPath">
            The font path.
            </param>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.#ctor(Sharp2D.Engine.Utility.FontDefinition,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Label"/> class.
            </summary>
            <param name="fontDefinition">
            The font definition.
            </param>
            <param name="position">
            The position.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Label" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.HasBorder">
            <summary>
            Gets or sets a value indicating whether this instance has border.
            </summary>
            <value>
            <c>true</c> if this instance has border; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.BorderTint">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>
            The color of the border.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.Alignment">
            <summary>
                Gets or sets the alignment of the text.
                <para>
                    If <see cref="P:Sharp2D.Engine.Common.UI.Controls.Label.Alignment" /> is set to <see cref="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Center" />,
                    this will be the center of which to draw the text.
                    If <see cref="P:Sharp2D.Engine.Common.UI.Controls.Label.Alignment" /> is set to <see cref="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Right" />,
                    the last letter of the text will be drawn at this position.
                </para>
            </summary>
            <value>
                The alignment.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.FocusTint">
            <summary>
                Gets or sets the tint to use when this control receives focus.
            </summary>
            <value>
                The focus tint.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.FontDefinition">
            <summary>
                Gets or sets the font definition.
            </summary>
            <value>
                The font definition.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.FontSize">
            <summary>
                Gets or sets the size of the font.
            </summary>
            <value>
                The size of the font.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.IsHovering">
            <summary>
                Gets a value indicating whether this control is currently being hovered.
                <para>
                    Uses <see cref="M:Sharp2D.Engine.Common.UI.Controls.Label.GetHoverState" />, which is virtual. Override at will.
                </para>
            </summary>
            <value>
                <c>true</c> if [is hovering]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.LineSpacing">
            <summary>
                Gets or sets the line spacing.
            </summary>
            <value>
                The line spacing.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.LocalPosition">
            <summary>
                Gets or sets the local position relative to it's parent object.
                If <see cref="P:Sharp2D.Engine.Common.UI.Controls.Label.Alignment" /> is set to <see cref="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Center" />,
                this will be the center of which to draw the text.
                If <see cref="P:Sharp2D.Engine.Common.UI.Controls.Label.Alignment" /> is set to <see cref="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Right" />,
                the last letter of the text will be drawn at this position.
            </summary>
            <value>
                The local position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.Text">
            <summary>
                Gets or sets the text of the label.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.Tint">
            <summary>
                Gets or sets the tint.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.HasDropShadow">
            <summary>
            Gets or sets a value indicating whether [drop shadow].
            </summary>
            <value>
              <c>true</c> if [drop shadow]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.DropShadowOffset">
            <summary>
            Gets or sets the drop shadow offset.
            </summary>
            <value>
            The drop shadow offset.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.DropShadowOpacity">
            <summary>
            Gets or sets the drop shadow opacity.
            </summary>
            <value>
            The drop shadow opacity.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the string and calls base.Draw.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Label.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>
            The width of the border.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.GetHoverState">
            <summary>
                Determines if this control is currently being hovered. Override for custom behavior.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.MoveLabel(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Common.UI.Enums.TextAlignment)">
            <summary>
            Moves the label, aligning it according to the provided region.
            </summary>
            <param name="region">
            The region.
            </param>
            <param name="alignment">
            The alignment.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            alignment
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this control, and runs the update method on all children.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.InitLabel">
            <summary>
                Initializes the label. Shared method for constructors.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Label.CalculatePosition">
            <summary>
                Calculates the position of the text. Sets the value of <see cref="F:Sharp2D.Engine.Common.UI.Controls.Label.textPositions" />.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.ScrollableView">
            <summary>
                Scrollable view.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.ScrollableView.rasterizer">
            <summary>
                The _rasterizer.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.ScrollableView.contentContainer">
            <summary>
                The _content container.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.ScrollableView.horizontalSlider">
            <summary>
                The _horizontal slider.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.ScrollableView.scrollSpeed">
            <summary>
                The _scroll speed.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.ScrollableView.verticalSlider">
            <summary>
                The _vertical slider.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.#ctor(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.UI.Controls.Slider,Sharp2D.Engine.Common.UI.Controls.Slider,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.ScrollableView"/> class.
            </summary>
            <param name="region">
            The region.
            </param>
            <param name="sprite">
            The Sprite.
            </param>
            <param name="verticalSlider">
            The vertical slider.
            </param>
            <param name="horizontalSlider">
            The horizontal slider.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.#ctor(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.String},Sharp2D.Engine.Common.UI.Controls.Slider,Sharp2D.Engine.Common.UI.Controls.Slider,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.ScrollableView"/> class.
            </summary>
            <param name="region">
            The region.
            </param>
            <param name="spriteSheet">
            The Sprite sheet.
            </param>
            <param name="verticalSlider">
            The vertical slider.
            </param>
            <param name="horizontalSlider">
            The horizontal slider.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.ScrollableView" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableView.ContentContainer">
            <summary>
                Gets the content container.
            </summary>
            <value>
                The content container.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableView.HorizontalSlider">
            <summary>
                Gets or sets the horizontal slider control.
            </summary>
            <value>
                The horizontal slider.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableView.IsFocusable">
            <summary>
                Gets the width of the verticalSlider container.
            </summary>
            <value>
                The width.
            </value>
            <summary>
                Gets the height of the verticalSlider container.
            </summary>
            <value>
                The height.
            </value>
            <summary>
                Determines whether this control is focusable. <see cref="T:Sharp2D.Engine.Common.UI.Controls.ScrollableView" /> is not.
            </summary>
            <value></value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableView.Padding">
            <summary>
                Gets or sets the padding.
            </summary>
            <value>
                The padding.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableView.ScrollSpeed">
            <summary>
                Gets or sets the scroll speed.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableView.VerticalSlider">
            <summary>
                Gets or sets the vertical slider control.
            </summary>
            <value>
                The vertical Slider.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.Add(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.CopyTo(Sharp2D.Engine.Common.ObjectSystem.GameObject[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            Index of the array.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws a <see cref="!:SpriteSheet"/> if <see cref="!:SpriteType"/> is set to <see cref="!:Enums.SpriteType.Sheet"/>.
                Controls and draws all logic related to drawing the content of the verticalSlider container properly.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.Insert(System.Int32,Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Inserts a game object to the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.ChildObjects"/> collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.RecalculateSize">
            <summary>
                The recalculate size.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.Remove(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if
                <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.RemoveAt(System.Int32)">
            <summary>
            Removes the child object at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The update.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.ChangedSliderValue(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Changeds the slider value.
            </summary>
            <param name="deltaSlide">
            The deltaSlide.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.DrawContainerContent(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the content of the container.
            </summary>
            <param name="spriteBatch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.HorizontalSliderOnChangedValue(System.Object,Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs)">
            <summary>
            Sliders the on changed value.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="args">
            The <see cref="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.VerticalSliderOnChangedValue(System.Object,Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs)">
            <summary>
            Sliders the on changed value.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="args">
            The <see cref="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.ContainerChildMoved(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs)">
            <summary>
            Triggered when the container's children have been modified.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="args">
            The arguments.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.SetContentContainer(Sharp2D.Engine.Common.UI.Controls.ScrollableViewContainer)">
            <summary>
            Sets the content container.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.SetHorizontalSlider(Sharp2D.Engine.Common.UI.Controls.Slider)">
            <summary>
            Sets the horizontal slider.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.SetVerticalSlider(Sharp2D.Engine.Common.UI.Controls.Slider)">
            <summary>
            Sets the vertical slider.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableView.SetupSlider(Sharp2D.Engine.Common.UI.Controls.Slider,Sharp2D.Engine.Common.ObjectSystem.Rectanglef)">
            <summary>
            Setups the slider.
            </summary>
            <param name="slider">
            The slider.
            </param>
            <param name="region">
            The region.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.ScrollableViewContainer">
            <summary>
                The container used in the ScrollableView UI Control
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableViewContainer.LocalPosition">
            <summary>
                Gets or sets the local position relative to it's parent object.
            </summary>
            <value>
                The local position.
            </value>
            <exception cref="T:System.InvalidCastException">ScrollableViewContainer must be a child of a ScrollableView control</exception>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.ScrollableViewContainer.ScrolledAmount">
            <summary>
                Gets or sets the scrolled amount.
            </summary>
            <value>
                The scrolled amount.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.ScrollableViewContainer.GetLocalPosition">
            <summary>
                Gets the local position. Uses the parent <see cref="T:Sharp2D.Engine.Common.UI.Controls.ScrollableView" />'s <see cref="T:Sharp2D.Engine.Common.UI.Layout.Padding" /> to offset itself
                from the parent.
            </summary>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
            <exception cref="T:System.InvalidCastException">
                ScrollableViewContainer must be a child of a ScrollableView control
            </exception>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.Slider">
            <summary>
                The slider.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Slider.currentValue">
            <summary>
                The _current value.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Slider.sliderButton">
            <summary>
                The _slider button.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Slider.sliderOffset">
            <summary>
                The _slider offset.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.UI.Controls.Button,System.Int32,Sharp2D.Engine.Common.UI.Controls.Direction,System.Int32,System.Int32,System.Int32,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Slider"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="sprite">
            The Sprite.
            </param>
            <param name="sliderButton">
            The slider button.
            </param>
            <param name="depth">
            The height.
            </param>
            <param name="direction">
            The direction for the slider to slide.
            </param>
            <param name="minValue">
            The minimum value on the slider.
            </param>
            <param name="startValue">
            The start value on the slider.
            </param>
            <param name="maxValue">
            The maximum value on the slider.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.String},Sharp2D.Engine.Common.UI.Controls.Button,System.Int32,Sharp2D.Engine.Common.UI.Controls.Direction,System.Int32,System.Int32,System.Int32,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Slider"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="spriteSheet">
            The Sprite sheet.
            </param>
            <param name="sliderButton">
            The slider button.
            </param>
            <param name="depth">
            The height.
            </param>
            <param name="direction">
            The direction.
            </param>
            <param name="minValue">
            The minimum value on the slider.
            </param>
            <param name="startValue">
            The start value on the slider.
            </param>
            <param name="maxValue">
            The maximum value on the slider.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.Slider" /> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.Slider.ChangedValue">
            <summary>
                Occurs when the value is changed.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.CurrentValue">
            <summary>
                Gets or sets the current value.
            </summary>
            <value>
                The current value.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.Depth">
            <summary>
                Gets the depth.
                <para>
                    The depth is the length of the slider. Usually the Height when it is Vertical, and the Width when it's
                    Horizontal.
                </para>
            </summary>
            <value>
                The depth.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.Direction">
            <summary>
                Gets or sets the direction the slider is sliding..
            </summary>
            <value>
                The direction.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.Enabled">
            <summary>
                Gets or sets a value indicating whether the control is enabled (Accepts user input).
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.IsSliding">
            <summary>
                Gets a value indicating whether it is currently sliding.
            </summary>
            <value>
                <c>true</c> if currently sliding; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.MaxValue">
            <summary>
                Gets or sets the maximum value.
            </summary>
            <value>
                The maximum value.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.MinValue">
            <summary>
                Gets or sets the minimum value.
            </summary>
            <value>
                The minimum value.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.Slider.SliderButton">
            <summary>
                Gets or sets the slider button.
            </summary>
            <value>
                The slider button.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.CalculateSliderPosition">
            <summary>
                Forces an update of the slider buttons position.
                <para>
                    This is automatically being invoked every time you change the value,
                    so there's no reason to do so yourself, but feel free to anyway. Yeah, we're nice like that.
                </para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.ChangeValue(System.Single)">
            <summary>
            Changes the value, and also updates the sliders current position to reflect <see cref="P:Sharp2D.Engine.Common.UI.Controls.Slider.CurrentValue"/>.
            </summary>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this control, and runs the update method on all children. Also controls whether it is sliding (the slider
                is currently being moved by the mouse).
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.OnChangedValue(Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs)">
            <summary>
            Calculates the slider value.
            </summary>
            <summary>
            Raises the <see cref="E:ChangedValue"/> event.
            </summary>
            <param name="e">
            The <see cref="T:Sharp2D.Engine.Common.UI.Events.SliderChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.CalculateSliderValue">
            <summary>
                Calculates the slider value.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.PerformSliding">
            <summary>
                Calculates and performs all the sliding logic.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.Slider.StoreSliderOffset(Sharp2D.Engine.Common.UI.Controls.Button)">
            <summary>
            The store slider offset.
            </summary>
            <param name="button">
            The button.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.Direction">
            <summary>
                The direction.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Direction.Vertical">
            <summary>
                The vertical.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.Direction.Horizontal">
            <summary>
                The horizontal.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.TextBox">
            <summary>
                TextBox control.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.TextBox.keyboardManager">
            <summary>
                The keyboard manager.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.TextBox.rasterizer">
            <summary>
                The rasterizer.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.TextBox.multiLine">
            <summary>
                The multi line.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.TextBox.textField">
            <summary>
                The text field.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Controls.TextBox.alignment">
            <summary>
                The alignment.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Utility.FontDefinition,Sharp2D.Engine.Common.Components.Sprites.SpriteSheet{System.String},Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.TextBox"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="font">
            The font.
            </param>
            <param name="spriteSheet">
            The Sprite sheet.
            </param>
            <param name="stateProvider">
            The state provider.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.TextBox" /> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.TextBox.TextChanged">
            <summary>
                Occurs when the text is changed.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.UI.Controls.TextBox.Triggered">
            <summary>
                Occurs when the textbox has been triggered. Usually by a left-button mouse click.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.TextBox.MultiLine">
            <summary>
                Gets or sets a value indicating whether the textbox is single, or multi line.
            </summary>
            <value>
                <c>true</c> if multi lined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.TextBox.Padding">
            <summary>
                Gets or sets the padding for the underlying label.
            </summary>
            <value>
                The padding.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.TextBox.Placeholder">
            <summary>
                Gets or sets the placeholder text.
            </summary>
            <value>
                The placeholder text.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.TextBox.TextField">
            <summary>
                Gets or sets the text field.
            </summary>
            <value>
                The text field.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Initializes this specific game object.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws a <see cref="!:SpriteSheet"/> if <see cref="!:SpriteType"/> is set to <see cref="!:Enums.SpriteType.Sheet"/>.
                Calls <see cref="M:Sharp2D.Engine.Common.ObjectSystem.GameObject.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)"/>.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.MoveLabel(Sharp2D.Engine.Common.UI.Enums.TextAlignment)">
            <summary>
            Moves the label, aligning it according to this textbox's region.
            </summary>
            <param name="alignment">
            The alignment.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this control, and runs the update method on all children.
                If focused, allows the user to input text in the field.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.HandleTriggerState">
            <summary>
                Does the same as <see cref="!:HandleDownState" />, but with trigger state, except there
                is probably no trigger visual state.
            </summary>
            <remarks>
                This also handles setting the focus to this control.
                If you want to implement this yourself, don't call base.
            </remarks>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.OnTextChanged(Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs)">
            <summary>
            Raises the <see cref="E:TextChanged"/> event.
            </summary>
            <param name="e">
            The <see cref="T:Sharp2D.Engine.Common.UI.Events.TextChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.OnTriggered(Sharp2D.Engine.Common.UI.Events.TextboxTriggeredEventArgs)">
            <summary>
            Raises the <see cref="E:Sharp2D.Engine.Common.UI.Controls.TextBox.Triggered"/> event.
            </summary>
            <param name="e">
            The <see cref="T:Sharp2D.Engine.Common.UI.Events.ButtonTriggeredEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.DrawContainerContent(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the content of the container.
            </summary>
            <param name="spriteBatch">
            The batch.
            </param>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.CalculateNewPosition">
            <summary>
                Calculates the new position.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.TextBox.SetLabel(Sharp2D.Engine.Common.UI.Controls.Label)">
            <summary>
            Sets the label, ensuring that the previous textfield is removed (if it existed).
                This is done by the <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/> base class.
            </summary>
            <param name="value">
            The new label.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Controls.UiControl">
            <summary>
                Base UI Control for drawing a UI.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.UiControl.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.UiControl" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.UiControl.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Controls.UiControl"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="sprite">
            The Sprite.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.UiControl.Enabled">
            <summary>
                Gets or sets a value indicating whether the control is enabled (Accepts user input).
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Controls.UiControl.DrawTint">
            <summary>
                The draw tint. If you want to customize this - e.g. a button's hover state.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Controls.UiControl.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this control, and runs the update method on all children.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Enums.TextAlignment">
            <summary>
                Label text alignment.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Left">
            <summary>
                The text of the label will be drawn from the left.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Center">
            <summary>
                The text of the label will be drawn from the center.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.UI.Enums.TextAlignment.Right">
            <summary>
                The text of the label will be drawn from the right.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Layout.Padding">
            <summary>
                Padding struct.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Layout.Padding.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Layout.Padding"/> struct.
            </summary>
            <param name="topBottom">
            The top bottom.
            </param>
            <param name="leftRight">
            The left right.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Layout.Padding.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Layout.Padding"/> struct.
            </summary>
            <param name="top">
            The top.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="bottom">
            The bottom.
            </param>
            <param name="left">
            The left.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Layout.Padding.Bottom">
            <summary>
                Gets or sets the bottom.
            </summary>
            <value>
                The bottom.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Layout.Padding.Left">
            <summary>
                Gets or sets the left.
            </summary>
            <value>
                The left.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Layout.Padding.Right">
            <summary>
                Gets or sets the right.
            </summary>
            <value>
                The right.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.Layout.Padding.Top">
            <summary>
                Gets or sets the top.
            </summary>
            <value>
                The top.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Layout.Padding.op_Addition(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Common.UI.Layout.Padding)">
            <summary>
                The +.
            </summary>
            <param name="source">
                The source.
            </param>
            <param name="padding">
                The padding.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Layout.Padding.op_Addition(Sharp2D.Engine.Common.UI.Layout.Padding,Sharp2D.Engine.Common.ObjectSystem.Rectanglef)">
            <summary>
                The +.
            </summary>
            <param name="padding">
                The padding.
            </param>
            <param name="source">
                The source.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Layout.Padding.op_Subtraction(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Common.UI.Layout.Padding)">
            <summary>
                The -.
            </summary>
            <param name="source">
                The source.
            </param>
            <param name="padding">
                The padding.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.Menus.UiManager">
            <summary>
                Root UI manager object. Handles tabbing.
                Should not be instantiated more than once.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Menus.UiManager.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite,Sharp2D.Engine.Common.ObjectSystem.GameObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Menus.UiManager"/> class.
            </summary>
            <param name="localPosition">
            The local position. This is the offset from the parent global position.
            </param>
            <param name="sprite">
            The texture.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Menus.UiManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.Menus.UiManager" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Menus.UiManager.FocusNext">
            <summary>
                Focuses the next focusable UI control.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Menus.UiManager.FocusPrevious">
            <summary>
                Focuses the previous focusable UI control.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Menus.UiManager.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
                Initializes this game object. Also initializes children.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.Menus.UiManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            If not paused, updates the specified game time. Else returns
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider">
            <summary>
                Handles visual states for user interactions.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider.HandleDisabledState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the state of the disabled.
            </summary>
            <param name="control">
            The control.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider.HandleDownState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Down"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider.HandleFocusState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Focus"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider.HandleHoverState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Hover"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.IInteractionStateProvider.HandleNoneState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.None"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider">
            <summary>
                Sprite Sheet interaction state provider.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider"/> class.
            </summary>
            <param name="standard">
            The standard.
            </param>
            <param name="disabled">
            The disabled.
            </param>
            <param name="focus">
            The focus.
            </param>
            <param name="hover">
            The hover.
            </param>
            <param name="down">
            Down.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.DisabledRegion">
            <summary>
                Gets or sets the disabled region.
            </summary>
            <value>
                Down region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.DownRegion">
            <summary>
                Gets or sets the down region.
            </summary>
            <value>
                Down region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.FocusRegion">
            <summary>
                Gets or sets the focus region.
            </summary>
            <value>
                The focus region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.HoverRegion">
            <summary>
                Gets or sets the hover region.
            </summary>
            <value>
                The hover region.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.StandardRegion">
            <summary>
                Gets or sets the standard region.
            </summary>
            <value>
                The standard region.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.HandleDisabledState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="!:UiControlInteractionState.Disabled"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.HandleDownState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="!:UiControlInteractionState.Down"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.HandleFocusState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="!:UiControlInteractionState.Focus"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.HandleHoverState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="!:UiControlInteractionState.Hover"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.SpriteSheetInteractionStateProvider.HandleNoneState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="!:UiControlInteractionState.None"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider">
            <summary>
                Handles states using tints.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.#ctor(System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider"/> class.
            </summary>
            <param name="standardTint">
            The standard tint.
            </param>
            <param name="disabledTint">
            The disabled tint.
            </param>
            <param name="focusTint">
            The focus tint.
            </param>
            <param name="hoverTint">
            The hover tint.
            </param>
            <param name="downTint">
            Down tint.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.DisabledTint">
            <summary>
                Gets or sets the disabled tint.
            </summary>
            <value>
                The disabled tint.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.DownTint">
            <summary>
                Gets or sets down tint.
            </summary>
            <value>
                Down tint.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.FocusTint">
            <summary>
                Gets or sets the focus tint.
            </summary>
            <value>
                The focus tint.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.HoverTint">
            <summary>
                Gets or sets the hover tint.
            </summary>
            <value>
                The hover tint.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.StandardTint">
            <summary>
                Gets or sets the standard tint.
            </summary>
            <value>
                The standard tint.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.HandleDisabledState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Disabled"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.HandleDownState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Down"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.HandleFocusState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Focus"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.HandleHoverState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Hover"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.UI.StateProviders.TintInteractionStateProvider.HandleNoneState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Handles the
                <see cref="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.None"/>
                state of the specified <see cref="!:control"/>.
            </summary>
            <param name="control">
            The control to handle.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Resolution">
            <summary>
                Resolution
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Resolution.ScreenAspectRatio">
            <summary>
                The screen scale
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Resolution.VirtualScreen">
            <summary>
                The virtual screen size. Default is 1280x800. See the non-existent documentation on how this works.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Resolution.preferredBackBufferHeight">
            <summary>
                The _preferred back buffer height.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Resolution.preferredBackBufferWidth">
            <summary>
                The _preferred back buffer width.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Resolution.Margin">
            <summary>
                Gets or sets the margin.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Resolution.Scale">
            <summary>
                The scale used for beginning the DrawBatch.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Resolution.ScalingFactor">
            <summary>
                Gets the scaling factor.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Resolution.WindowScreen">
            <summary>
                Gets the window screen.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Resolution.DetermineDrawScaling">
            <summary>
                <para>
                    Determines the draw scaling.
                </para>
                <para>
                    Used to make the mouse scale correctly according to the virtual resolution,
                    no matter the actual resolution.
                </para>
                <para>
                    Example: 1920x1080 applied to 1280x800: new Vector2(1.5f, 1,35f)
                </para>
            </summary>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Resolution.TransformPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            The transform point.
            </summary>
            <param name="original">
            The original.
            </param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Resolution.TransformPointToWorld(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.World.Camera.Camera)">
            <summary>
            The transform point to world.
            </summary>
            <param name="original">
            The original.
            </param>
            <param name="camera">
            The camera.
            </param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Resolution.Update(System.Int32,System.Int32)">
            <summary>
            Updates the specified preferred back buffer width.
            </summary>
            <param name="preferredBackBufferWidth">
            Width of the preferred back buffer.
            </param>
            <param name="preferredBackBufferHeight">
            Height of the preferred back buffer.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Scene.Scene">
            <summary>
                Scene is the root of everything. Including evil.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.#ctor(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Scene.Scene"/> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Scene.Scene.ObjectMoved">
            <summary>
                Occurs when any game object in the scene has been moved.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Scene.Scene.ComponentMoved">
            <summary>
                Occurs when any component in the scene has been moved.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Scene.Scene.SceneInitialized">
            <summary>
            Occurs when a scene is initialized.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.CurrentScene">
            <summary>
                Gets or sets the current scene being rendered and updated.
                If the scene is not ready (<see cref="P:Sharp2D.Engine.Common.Scene.Scene.IsReady" />), draw/update it's <see cref="P:Sharp2D.Engine.Common.Scene.Scene.LoadingScene" /> instead.
            </summary>
            <value>
                The current.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.Name">
            <summary>
            Gets or sets the name of this scene.
            </summary>
            <value>
            The name of this scene.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.FixedScale">
            <summary>
                Gets or sets a value indicating whether fixed scale.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.HasLoadingScene">
            <summary>
            Gets a value indicating whether this scene has a loading scene.
            </summary>
            <value>
              <c>true</c> if [has loading scene]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.IsReady">
            <summary>
                Gets or sets a value indicating whether this scene has loaded.
            </summary>
            <value>
                <c>true</c> if [is ready]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.LoadingScene">
            <summary>
                Gets the loading scene. If null, it means there is no loading scene.
            </summary>
            <value>
                The loading scene.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.MainCamera">
            <summary>
                Gets or sets the camera that controls the world.
            </summary>
            <value>
                The camera.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.SceneData">
            <summary>
                Gets or sets the scene data.
            </summary>
            <value>
                The scene data.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.UiRoot">
            <summary>
                Gets the UI root.
            </summary>
            <value>
                The UI root.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.Scene.WorldRoot">
            <summary>
                Gets the world root.
            </summary>
            <value>
                The world root.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.CleanupEvents">
            <summary>
                Cleans up the static event handlers.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.Load(Sharp2D.Engine.Common.Scene.Scene,Sharp2D.Engine.Common.Scene.Scene)">
            <summary>
            Loads the scene from the specified scene file path.
            </summary>
            <param name="scene">The scene.</param>
            <param name="loadingScene">The loading scene.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.UnloadCurrent">
            <summary>
                Unloads the current scene. !VERY IMPORTANT ON PHONES!.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Initializes this object.
            </summary>
            <param name="resolver"></param>
            <inheritdoc />
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.Unload">
            <summary>
                The unload.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. Updates the loading scene, if this scene is currently being loaded.
                If not, updates this scene.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. Draws the loading scene, if this scene is currently being loaded.
                If not, draws this scene.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.OnObjectMoved(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.ChildObjectMovedArgs)">
            <summary>
            Called when an object has been moved around the scene hierachy.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.Scene.OnComponentMoved(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.ChildComponentMovedArgs)">
            <summary>
            Called when an object has been moved around the scene hierachy.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Sharp2D.Engine.Common.Scene.SceneData">
            <summary>
                Scene Data container.
                TODO: Wrappers in Scene to access these.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Scene.SceneData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Scene.SceneData" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.SceneData.UiRoot">
            <summary>
                Gets or sets the ui root.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Scene.SceneData.WorldRoot">
            <summary>
                Gets or sets the world root.
                <para>Can only contains World Objects or objects derived from it.</para>
            </summary>
            <value>
                The world root.
            </value>
        </member>
        <member name="T:Sharp2D.Engine.Common.Sharp2DApplication">
            <summary>
                Sharp2D Application.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Sharp2DApplication.FloatTolerance">
            <summary>
                The float tolerance used for float comparisons.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Sharp2DApplication.ContentRoot">
            <summary>
                Gets or sets the root directory for the content manager.
            </summary>
            <value>
                The root directory.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.#ctor(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Sharp2DApplication"/> class.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.Sharp2DApplication.GameCreated">
            <summary>
                Occurs when game has been created.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.CreateGame(Sharp2D.Engine.Common.SharpGameManager)">
            <summary>
                Creates the game. It is up to each platform to decide how to do this.
            </summary>
            <returns>
                The <see cref="T:Sharp2D.Engine.Common.SharpGameManager" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.RunGame(Sharp2D.Engine.Common.IGameHost)">
            <summary>
            Runs the game. It is up to each platform to decide how to do this, or if it should be done.
            </summary>
            <param name="game">
            The game.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.SetupGraphics">
            <summary>
                Sets up the graphics.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.Start">
            <summary>
            Starts the game.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.RegisterServices">
            <summary>
                Registers the services.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.OnGameCreated">
            <summary>
                Called when game has been created.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DApplication.InternalRegisterServices">
            <summary>
                Internal version of the Register Services.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.Sharp2DGame">
            <summary>
                Sharp2D Game.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Sharp2DGame.gameManager">
            <summary>
            The game manager
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.Sharp2DGame.resolver">
            <summary>
            The resolver
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.Sharp2DGame.ActualGraphics">
            <summary>
            Gets the actual graphics.
            </summary>
            <value>
            The actual graphics.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DGame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.Sharp2DGame"/> class.
            <para>If this is directly invoked, remember to call </para>
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DGame.SetGameManagerAndResolver(Sharp2D.Engine.Common.SharpGameManager,Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
            Sets the game manager.
            </summary>
            <param name="gameManager">The game manager.</param>
            <param name="resolver"></param>
        </member>
        <member name="P:Sharp2D.Engine.Common.Sharp2DGame.Graphics">
            <summary>
                Gets the graphics device manager.
            </summary>
            <value>
                The graphics.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.Sharp2DGame.DrawBatch">
            <summary>
                Gets the Sprite batch.
            </summary>
            <value>
                The Sprite batch.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DGame.Initialize">
            <summary>
                Initializes the game.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DGame.LoadContent">
            <summary>
                Loads the content.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the game.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.Sharp2DGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the game objects to the screen. Calls Root.Draw.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="E:Sharp2D.Engine.Common.SharpGameManager.ContentLoaded">
            <summary>
                Occurs when content has loaded.
            </summary>
        </member>
        <member name="E:Sharp2D.Engine.Common.SharpGameManager.GameInitialized">
            <summary>
                Occurs when game has been initialized.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.BackgroundColor">
            <summary>
                Gets or sets the color of the background.
            </summary>
            <value>
                The color of the background.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.Graphics">
            <summary>
                Gets the graphics device manager.
            </summary>
            <value>
                The graphics.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.IsPaused">
            <summary>
                Gets or sets a value indicating whether the game is paused.
            </summary>
            <value>
                <c>true</c> if [is paused]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.IsActive">
            <summary>
            Gets a value indicating whether the game window is active (in foreground).
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.SpriteBatch">
            <summary>
                Gets the Sprite batch.
            </summary>
            <value>
                The Sprite batch.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.VirtualResolution">
            <summary>
                Gets the virtual resolution.
            </summary>
            <value>
                The virtual resolution.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.SharpGameManager.WindowResolution">
            <summary>
                Gets the window resolution.
            </summary>
            <value>
                The window resolution.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.ApplyResolutionChanges">
            <summary>
                Applies any new resolution changes.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.SetVirtualResolution(System.Int32,System.Int32)">
            <summary>
            Sets the virtual resolution.
                Call <see cref="M:Sharp2D.Engine.Common.SharpGameManager.ApplyResolutionChanges"/> once you are done configuring.
                <para>
            The Virtual Resolution is the resolution which you base all coordinates after.
                    If you're planning on using large graphics, you may want to set this to Full HD,
                    so that you do not loose a single pixel in the scaling act.
                    However if you're making an 8-bit game, and you don't care about scaling because of the
                    low quality of the graphics, you may want to set this to low, so sprites doesn't have
                    to be drawn large, to fit.
                </para>
            <remarks>
            Define this at an early stage of development, seeing as all UI controls will be based on this resolution!
                </remarks>
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.SetWindowResolution(System.Int32,System.Int32)">
            <summary>
            Sets the resolution of the game window. This scales everything.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the game objects to the screen. Calls Root.Draw.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.Initialize">
            <summary>
                Initializes the game.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.LoadContent">
            <summary>
                Loads the content.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the game.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.OnGameInitialized">
            <summary>
                Called when [game initialized].
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.SharpGameManager.OnLoadContent">
            <summary>
                Called when content has been loaded.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Common.World.Camera.Camera">
            <summary>
                Game Camera. Allows you to pan around in the world, instead of being restricted to the window resolution.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.Camera.MaxZoom">
            <summary>
                The max zoom.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.Camera.MinZoom">
            <summary>
                The min zoom.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.Camera.graphics">
            <summary>
                The _graphics.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.Camera.currentZoom">
            <summary>
                The _current zoom.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.Camera.translateCenter">
            <summary>
                The _translate center.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.World.Camera.Camera" /> class.
                The constructor for the Camera class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.EnableMovementTracking">
            <summary>
                Gets or sets a value indicating whether movement tracking is enabled.
            </summary>
            <value>
                <c>true</c> if movement tracking is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.EnableRotationTracking">
            <summary>
                Gets or sets a value indicating whether rotation tracking is enabled.
            </summary>
            <value>
                <c>true</c> if rotation tracking is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.MainCamera">
            <summary>
                Gets or sets a value indicating whether this is the main camera of the scene.
            </summary>
            <value>
                <c>true</c> if this is the main camera; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.Projection">
            <summary>
                Gets or sets the projection.
            </summary>
            <value>
                The projection.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.SimProjection">
            <summary>
                Gets or sets the simulation projection matrix.
            </summary>
            <value>
                The simulation projection.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.SimView">
            <summary>
                Gets or sets the simulation view matrix.
            </summary>
            <value>
                The simulation view.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.Tracker">
            <summary>
                Gets the tracker, if one exists in the Component collection.
                <para>If one does not exist, returns null.</para>
            </summary>
            <value>
                The tracker.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.View">
            <summary>
                Gets or sets the view.
            </summary>
            <value>
                The view.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.Camera.Zoom">
            <summary>
                The current rotation of the camera in radians.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.ConvertScreenToWorld(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a provided screen coordinate to world coordinates, based on the current camera location.
                <para>
            Used (for instance) to use the mouse for placing something in the world.
                </para>
            </summary>
            <param name="location">
            The location.
            </param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.ConvertWorldToScreen(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a provided world coordinate to screen coordinates, based on the current camera location.
                <para>
            This is used to get the position of the object on the screen.
                    Used (for instance) to detecting if the mouse is clicking on a World Object.
                </para>
            </summary>
            <param name="location">
            The location.
            </param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
                Initializes this instance, and invokes <see cref="M:Sharp2D.Engine.Common.World.Camera.Camera.SetCameraSettings" />.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.MoveCamera(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the camera.
            </summary>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.ResetCamera">
            <summary>
                Resets the camera to default values, and invokes <see cref="M:Sharp2D.Engine.Common.World.Camera.Camera.SetView" />.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.RotateCamera(System.Single)">
            <summary>
            Rotates the camera.
            </summary>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.SetCameraSettings">
            <summary>
                Sets up default camera information (using the current property values).
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.SetView">
            <summary>
                Recalculates the view matrix, based on all the current information stored in this instance.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.Camera.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Post <see cref="M:Sharp2D.Engine.Common.World.Camera.Camera.Update(Microsoft.Xna.Framework.GameTime)"/>, will invokes <see cref="M:Sharp2D.Engine.Common.World.Camera.Camera.SetView"/>.
            </summary>
            <param name="gameTime">
                The game Time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.World.Camera.CameraTracker">
            <summary>
                Camera tracker component.
                A Camera Tracker is a component added to the Camera, and every update it will move the Camera closer to the players
                position, until reaching the exact position.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.CameraTracker.targetPosition">
            <summary>
                The _target position.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Common.World.Camera.CameraTracker.targetRotation">
            <summary>
                The _target rotation.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.CameraTracker.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.World.Camera.CameraTracker" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.CurrentPosition">
            <summary>
                Gets the current position.
            </summary>
            <value>
                The current position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.CurrentRotation">
            <summary>
                Gets the current rotation.
            </summary>
            <value>
                The current rotation.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.EnablePositionTracking">
            <summary>
                Gets or sets a value indicating whether tracking of <see cref="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.Target" />'s position is enabled.
                <para>
                    If true, every <see cref="M:Sharp2D.Engine.Common.World.Camera.CameraTracker.Update(Microsoft.Xna.Framework.GameTime)" />, it will alter <see cref="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.CurrentPosition" /> to reflect the current
                    position of target.
                </para>
            </summary>
            <value>
                <c>true</c> if [enable position tracking]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.EnableRotationTracking">
            <summary>
                Gets or sets a value indicating whether tracking of <see cref="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.Target" />'s rotation is enabled.
                <para>
                    If true, every <see cref="M:Sharp2D.Engine.Common.World.Camera.CameraTracker.Update(Microsoft.Xna.Framework.GameTime)" />, it will alter <see cref="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.CurrentRotation" /> to reflect the current
                    rotation of target.
                </para>
            </summary>
            <value>
                <c>true</c> if [enable rotation tracking]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.Target">
            <summary>
                Gets or sets the target this <see cref="T:Sharp2D.Engine.Common.World.Camera.CameraTracker" /> is tracking.
            </summary>
            <value>
                The target.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.CameraTracker.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Does nothing. Can't draw a Camera Tracker
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.Camera.CameraTracker.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the Camera Tracker. If <see cref="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.EnablePositionTracking"/> is true, updates position. Likewise for
                <see cref="P:Sharp2D.Engine.Common.World.Camera.CameraTracker.EnableRotationTracking"/>.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Common.World.WorldManager">
            <summary>
                The world manager.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.WorldManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Common.World.WorldManager" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.WorldManager.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <summary>
                The initialize.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Sharp2D.Engine.Common.World.WorldManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the world.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Input.CursorDevice">
            <summary>
                The Mouse cursor implementation used for Computer environments.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.CurrentDeltaScroll">
            <summary>
            Gets the current delta scroll of the pointer device.
            <para>This will only have a different value for one Frame (Update call)</para>
            </summary>
            <value>
            The current delta scroll.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.CurrentPosition">
            <summary>
            Gets the current position of the pointer device.
            </summary>
            <value>
            The current position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.IsTriggerKeyDown">
            <summary>
            Gets a value indicating whether is trigger key down.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.IsTriggerKeyReleased">
            <summary>
            Gets a value indicating whether is trigger key triggered.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.IsTriggerKeyPressed">
            <summary>
            Gets a value indicating whether is trigger key pressed.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.PreviousDeltaScroll">
            <summary>
                Gets the previous delta scroll of the pointer device.
            </summary>
            <value>
                The previous delta scroll.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.CursorDevice.PreviousPosition">
            <summary>
                Gets the previous position of the pointer device.
            </summary>
            <value>
                The previous position.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.CursorDevice.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the pointer device, allowing for changed states to take effect.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Input.KeyboardManager">
            <summary>
                Keyboard manager interface. Each platform should implement this.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Input.IUiInteractionProvider">
            <summary>
                The UIInteractionProvider interface.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.IUiInteractionProvider.GetUiControlInteractionState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Gets the state of the UI control interaction.
            </summary>
            <param name="control">
            The control.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.IUiInteractionProvider.ShouldFocusNext">
            <summary>
                Should we focus the next control now?
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.IUiInteractionProvider.ShouldFocusPrevious">
            <summary>
                Should we focus the previous control now?
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Input.PcUiInteractionProvider">
            <summary>
            A Standard Input Provider.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.PcUiInteractionProvider.GetUiControlInteractionState(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Gets the state of the UI control interaction.
            </summary>
            <param name="control">
            The control.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.PcUiInteractionProvider.IsControlBeingTriggered(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Determines whether the control is being clicked.
            </summary>
            <param name="control">
            The control.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.PcUiInteractionProvider.IsControlDown(Sharp2D.Engine.Common.UI.Controls.InteractableUiControl)">
            <summary>
            Determines if the specified bvutton's state is "down".
            </summary>
            <param name="control">
            The control.
            </param>
            <returns>
            <c>true</c> if the control is being pushed down; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.PcUiInteractionProvider.ShouldFocusNext">
            <summary>
                Should we focus the next control now?
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.PcUiInteractionProvider.ShouldFocusPrevious">
            <summary>
                Should we focus the previous control now?
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState">
            <summary>
                Represents the state of user interaction with a UI control.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.None">
            <summary>
                Nothing.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Disabled">
            <summary>
                The control is disabled.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Focus">
            <summary>
                The control is focussed.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Hover">
            <summary>
                The control is being hovered over.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Down">
            <summary>
                The control is down.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.Input.UiControlInteractionState.Trigger">
            <summary>
                The control is triggered.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Input.IPointerDevice">
            <summary>
                A pointer device used for abstracting the Mouse class out of the scope, while still using its features in code.
                Used for example for pointing somewhere on the game window.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.CurrentDeltaScroll">
            <summary>
                Gets the current delta scroll of the pointer device.
            <para>This is likely only applicable on Computer devices.</para>
            </summary>
            <value>
                The current delta scroll.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.CurrentPosition">
            <summary>
                Gets the current position of the pointer device.
            </summary>
            <value>
                The current position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.IsTriggerKeyDown">
            <summary>
                Gets a value indicating whether is trigger key down.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.IsTriggerKeyReleased">
            <summary>
                Gets a value indicating whether is trigger key released.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.IsTriggerKeyPressed">
            <summary>
                Gets a value indicating whether is trigger key pressed.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.PreviousDeltaScroll">
            <summary>
                Gets the previous delta scroll of the pointer device.
            </summary>
            <value>
                The previous delta scroll.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.PreviousPosition">
            <summary>
                Gets the previous position of the pointer device.
            </summary>
            <value>
                The previous position.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Input.IPointerDevice.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the pointer device, allowing for changed states to take effect.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.ContentManagerFactory">
            <summary>
                Content Manager Factory
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.ContentManagerFactory.CreateAndUnloadCurrent">
            <summary>
                Creates a ContentManager, passing it the specified root path.
            </summary>
            <param name="rootPath">
                The root path.
            </param>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Content.ContentManager" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Sharp2D Application Game was null.
                or
                Game Services container was null.
            </exception>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.GameContract">
            <summary>
                Common GameContract. Everything game-related should implement this.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Infrastructure.GameContract.runables">
            <summary>
            Gets the runables.
            </summary>
            <value>
            The runables.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Infrastructure.GameContract" /> class.
                Sets up default values.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.GameContract.IsGenerated">
            <summary>
            Gets or sets a value indicating whether this object is generated via the editor.
            </summary>
            <value>
              <c>true</c> if this instance is generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.GameContract.IsHidden">
            <summary>
                Does the exact opposite of <see cref="P:Sharp2D.Engine.Infrastructure.GameContract.IsVisible" />. Provided as a shortcut for readability.
            </summary>
            <value>
                <c>true</c> if [hidden]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.GameContract.IsPaused">
            <summary>
                Gets or sets a value indicating whether this object should receive updates.
            </summary>
            <value>
                <c>true</c> if [paused]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.GameContract.IsVisible">
            <summary>
                Gets or sets a value indicating whether this object is visible in the game.
            </summary>
            <value>
                <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.Hide">
            <summary>
                Helper method for hiding this object. Same as setting <see cref="P:Sharp2D.Engine.Infrastructure.GameContract.IsVisible" /> to <c>false</c>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <inheritdoc />
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.Show">
            <summary>
                Helper method for showing this object. Same as setting <see cref="P:Sharp2D.Engine.Infrastructure.GameContract.IsVisible" /> to <c>true</c>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. This is where you want to handle your logic.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.ScheduleRun(System.Action)">
            <summary>
            Runs the specified operation on the next Update cycle.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.ScheduleRunAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the specified asynchronous operation on the next Update cycle.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.GameContract.InvokeRunables">
            <summary>
            Invokes the runables.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.IContentManagerFactory">
            <summary>
                Content Manager swapper. We do this to make unit testing less annoying.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IContentManagerFactory.CreateAndUnloadCurrent">
            <summary>
                Creates a ContentManager, passing it the specified root path.
            </summary>
            <param name="rootPath">
                The root path.
            </param>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Content.ContentManager" />.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.IFileService">
            <summary>
                File service interface - should be implemented on each platform.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IFileService.Exists(System.String)">
            <summary>
            Determines if the file exists.
            </summary>
            <param name="path">
            The path.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IFileService.MapPath(System.String[])">
            <summary>
            Maps the path to be relative to the content root.
            </summary>
            <param name="paths">
            The paths.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IFileService.ReadAllText(System.String)">
            <summary>
            Reads all text from the specified file.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IFileService.ReadStream(System.String)">
            <summary>
            Opens a read stream to the specified file.
            </summary>
            <param name="assetName">
            Name of the asset.
            </param>
            <returns>
            The <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IFileService.WriteAllText(System.String,System.String)">
            <summary>
            Writes all text to the specified file.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <param name="content">
            The content.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.IGameContract">
            <summary>
                A common interface for XNA classes that nearly all classes inherit.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.IGameContract.IsGenerated">
            <summary>
            Gets or sets a value indicating whether this object is generated via the editor.
            </summary>
            <value>
              <c>true</c> if this instance is generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.IGameContract.IsHidden">
            <summary>
                Does the exact opposite of <see cref="P:Sharp2D.Engine.Infrastructure.IGameContract.IsVisible" />. Provided as a shortcut for readability.
            </summary>
            <value>
                <c>true</c> if [hidden]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.IGameContract.IsPaused">
            <summary>
                Gets or sets a value indicating whether this object should receive updates.
            </summary>
            <value>
                <c>true</c> if [paused]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Infrastructure.IGameContract.IsVisible">
            <summary>
                Gets or sets a value indicating whether this object is visible in the game.
            </summary>
            <value>
                <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.Draw(Sharp2D.Engine.Drawing.SharpDrawBatch,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws this object to the screen.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <param name="time">
            The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.Hide">
            <summary>
                Helper method for hiding this object. Same as setting <see cref="P:Sharp2D.Engine.Infrastructure.GameContract.IsVisible" /> to <c>false</c>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.Initialize(Sharp2D.Engine.Infrastructure.IResolver)">
            <inheritdoc />
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.Show">
            <summary>
                Helper method for showing this object. Same as setting <see cref="P:Sharp2D.Engine.Infrastructure.GameContract.IsVisible" /> to <c>true</c>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called every Frame. This is where you want to handle your logic.
            </summary>
            <param name="gameTime">
                The game time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.ScheduleRun(System.Action)">
            <summary>
            Runs the specified operation on the next Update cycle.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.ScheduleRunAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the specified asynchronous operation on the next Update cycle.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IGameContract.WaitForUpdate">
            <summary>
            Waits for the next update cycle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.IRootObject">
            <summary>
                A Root Object is the top-most objects right beneath the scene.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.IResolver">
            <summary>
                Service Locator
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.Resolve``1(System.Type)">
            <summary>
            Resolves the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.TryResolve``1">
            <summary>
            Tries to resolves this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.Register``1(``0)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.Register``2">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TInt">The type of the int.</typeparam>
            <typeparam name="TImpl">The type of the implementation.</typeparam>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.Unregister``1">
            <summary>
            Unregisters the binding for the specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.IResolver.ClearBindings">
            <summary>
            Clears the services.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Infrastructure.Serialization.ISerializer">
            <summary>
                Serializer contract.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Serialization.ISerializer.Deserialize``1(System.String)">
            <summary>
            The deserialize.
            </summary>
            <param name="content">
            The content.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Serialization.ISerializer.DeserializeFromFile``1(System.String)">
            <summary>
            The deserialize from file.
            </summary>
            <param name="file">
            The file.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Serialization.ISerializer.Serialize``1(``0)">
            <summary>
            The serialize.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Infrastructure.Serialization.ISerializer.SerializeToFile``1(``0,System.String)">
            <summary>
            The serialize to file.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="file">
            The file.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Brush">
            <summary>
            Objects used to fill the interiors of shapes and paths.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Black">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Blue">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Brown">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Cyan">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkBlue">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkCyan">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkGray">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkGoldenrod">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkGreen">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkMagenta">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkOrange">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.DarkRed">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Goldenrod">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Gray">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Green">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.LightBlue">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.LightCyan">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.LightGray">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.LightGreen">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.LightPink">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.LightYellow">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Lime">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Magenta">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Orange">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Pink">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Purple">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Red">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Teal">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.White">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Yellow">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.</summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brush.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Sharp2D.Engine.Drawing.Brush"/> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brush.#ctor(System.Single)">
            <summary>
            Initializes a new instance of a <see cref="T:Sharp2D.Engine.Drawing.Brush"/> class with a given alpha value.
            </summary>
            <param name="alpha">Alpha value of the brush.</param>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Alpha">
            <summary>
            The alpha value of the brush.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Color">
            <summary>
            The color of the brush.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Texture">
            <summary>
            The texture resource of the brush.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Brush.Transform">
            <summary>
            Gets or sets the transformation to apply to brush.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brush.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Sharp2D.Engine.Drawing.Brush"/> object.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brush.Finalize">
            <summary>
            Attempts to dispose unmanaged resources.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brush.DisposeManaged">
            <summary>
            Releases the managed resources used by the <see cref="T:Sharp2D.Engine.Drawing.Brush"/>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brush.DisposeUnmanaged">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Sharp2D.Engine.Drawing.Brush"/>.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Brushes.CheckerBrush">
            <summary>
            A <see cref="T:Sharp2D.Engine.Drawing.Brush"/> that represents a two-color checkered texture.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brushes.CheckerBrush.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Brushes.CheckerBrush"/> with the given <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>, colors, and square cell size.
            </summary>
            <param name="device">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> that should be used to create a texture.</param>
            <param name="color1">The first checker color.</param>
            <param name="color2">The second checker color.</param>
            <param name="width">The size of the width and height of a single colored square.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brushes.CheckerBrush.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Brushes.CheckerBrush"/> with the given <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>, colors, square cell size, and opacity.
            </summary>
            <param name="device">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> that should be used to create a texture.</param>
            <param name="color1">The first checker color.</param>
            <param name="color2">The second checker color.</param>
            <param name="width">The size of the width and height of a single colored square.</param>
            <param name="opacity">The opacity to render the texture with.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brushes.CheckerBrush.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Brushes.CheckerBrush"/> with the given <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>, colors, and cell dimensions.
            </summary>
            <param name="device">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> that should be used to create a texture.</param>
            <param name="color1">The first checker color.</param>
            <param name="color2">The second checker color.</param>
            <param name="width">The width of a single colored cell.</param>
            <param name="height">The height of a single colored cell.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brushes.CheckerBrush.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Brushes.CheckerBrush"/> with the given <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>, colors, cell dimensions, and opacity.
            </summary>
            <param name="device">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> that should be used to create a texture.</param>
            <param name="color1">The first checker color.</param>
            <param name="color2">The second checker color.</param>
            <param name="width">The width of a single colored cell.</param>
            <param name="height">The height of a single colored cell.</param>
            <param name="opacity">The opacity to render the texture with.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Brushes.CheckerBrush.DisposeManaged">
            <InheritDoc />
        </member>
        <member name="T:Sharp2D.Engine.Drawing.DrawCache">
            <summary>
            An opaque object that represents pre-compiled low-level geometry.
            </summary>
            <remarks><see cref="T:Sharp2D.Engine.Drawing.DrawCache"/> objects can be rendered by a <see cref="!:DrawBatch"/>.</remarks>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.DrawCache.IsValid">
            <summary>
            Gets whether the <see cref="T:Sharp2D.Engine.Drawing.DrawCache"/> is still valid.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.ArcType">
            <summary>
            The type of arc in closed drawing or fill operations.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.ArcType.Segment">
            <summary>
            Causes the endpoints of the arc to be connected directly.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.ArcType.Sector">
            <summary>
            Causes the endpoints of the arc to be connected to the arc center, as in a pie wedge.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.BezierType">
            <summary>
            The type of Bezier curve specified in draw operations.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.BezierType.Quadratic">
            <summary>
            Specifies a quadratic Bezier curve (1 control point).
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.BezierType.Cubic">
            <summary>
            Specifies a cubic Bezier curve (2 control points).
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.LineCap">
            <summary>
            The style of termination used at the endpoints of stroked paths.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineCap.Flat">
            <summary>
            The stroked path is cut off at the immediate edge of the path's endpoint.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineCap.Square">
            <summary>
            The stroked path runs half the pen's width past the edge of the path's endpoint.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineCap.Triangle">
            <summary>
            The stroked path forms a triangular point half the pen's width past the edge of the path's endpoint.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineCap.InvTriangle">
            <summary>
            The stroked path forms an inverse triangle half the pen's width past the edge of the path's endpoint.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineCap.Arrow">
            <summary>
            The stroked path forms an arrow at the path's endpoint.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.LineJoin">
            <summary>
            Specifies how to join consecutive line segments in a path.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineJoin.Miter">
            <summary>
            Specifies a mitered join.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.LineJoin.Bevel">
            <summary>
            Specifies a beveled join.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.PathType">
            <summary>
            Whether a path is open or closed in draw operations.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.PathType.Open">
            <summary>
            The endpoints of the path should not be connected.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.PathType.Closed">
            <summary>
            The endpoints of the path should be connected.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.PenAlignment">
            <summary>
            The alignment of a path stroked by a <see cref="T:Sharp2D.Engine.Drawing.Pen"/> relative to the ideal path.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.PenAlignment.Center">
            <summary>
            The stroked path should be centered directly over the ideal path.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.PenAlignment.Inset">
            <summary>
            The stroked path should run along the inside edge of the ideal path.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.PenAlignment.Outset">
            <summary>
            The stroked path should run along the outside edge of the ideal path.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.StrokeType">
            <summary>
            Specifies what components of a path should be stroked.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.StrokeType.Fill">
            <summary>
            Only stroke the path itself.  Should not be confused with filling a shape enclosed by a path.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.StrokeType.Outline">
            <summary>
            Only stroke the outline of the path.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.StrokeType.Both">
            <summary>
            Stroke both the path and its outline.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.DrawSortMode">
            <summary>
            Defines figure sort-rendering options.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.DrawSortMode.Deferred">
            <summary>
            Figures are not drawn until <see cref="!:DrawBatch.End"/> is called.  <see cref="!:DrawBatch.End"/> will apply graphics
            device settings and draw all figures in one batch in the same order drawing calls were received.  <see cref="!:DrawBatch"/>
            defaults to <c>Deferred</c> mode.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Drawing.DrawSortMode.Immediate">
            <summary>
            <see cref="!:DrawBatch.Begin()"/> will apply new graphics device settings, and figures will be drawn within each drawing call.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.IGraphicsPath">
            <summary>
            Represents computed path geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.VertexCount">
            <summary>
            The number of vertices in the computed geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.IndexCount">
            <summary>
            The number of vertex indexes in the computed geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.VertexPositionData">
            <summary>
            The raw vertex data of the computed geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.VertexTextureData">
            <summary>
            The raw texture data of the computed geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.VertexColorData">
            <summary>
            The raw color data of the computed geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.IndexData">
            <summary>
            The raw index data of the computed geometry.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.IGraphicsPath.Pen">
            <summary>
            The <see cref="P:Sharp2D.Engine.Drawing.IGraphicsPath.Pen"/> used to compute the geometry.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.GraphicsPath">
            <summary>
            Represents a stroked path.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen)">
            <summary>
            Create an empty path with a given <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen"></param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Compute a stroked open path given a set of points and a <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="points">The points making up the ideal path.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Compute a stroked open or closed path given a set of points and a <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType,System.Int32,System.Int32)">
            <summary>
            Compute a stroked open or closed path given a set of points and a <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <param name="offset">The offset into the list of points that starts the path.</param>
            <param name="count">The number of points in the path.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Collections.Generic.IList{System.Single},Sharp2D.Engine.Drawing.PathType,System.Int32,System.Int32)">
            <summary>
            Compute a stroked open or closed path given a set of points and a <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="lengths">The lengths of each point from the path start.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <param name="offset">The offset into the list of points that starts the path.</param>
            <param name="count">The number of points in the path.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Compute a stroked open or closed path given a set of points and a path and outline <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="outlinePen">The pen to stroke the outline of the path with.</param>
            <param name="points">The points making up the ideal path.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.StrokeType)">
            <summary>
            Compute a stroked open or closed path given a set of points and a path and outline <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="outlinePen">The pen to stroke the outline of the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="strokeType">Whether to stroke just the path, the outline, or both.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Compute a stroked open or closed path given a set of points and a path and outline <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="outlinePen">The pen to stroke the outline of the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType,Sharp2D.Engine.Drawing.StrokeType)">
            <summary>
            Compute a stroked open or closed path given a set of points and a path and outline <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="outlinePen">The pen to stroke the outline of the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <param name="strokeType">Whether to stroke just the path, the outline, or both.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType,System.Int32,System.Int32)">
            <summary>
            Compute a stroked open or closed path given a set of points and a path and outline <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="outlinePen">The pen to stroke the outline of the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <param name="offset">The offset into the list of points that starts the path.</param>
            <param name="count">The number of points in the path.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.GraphicsPath.#ctor(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType,System.Int32,System.Int32,Sharp2D.Engine.Drawing.StrokeType)">
            <summary>
            Compute a stroked open or closed path given a set of points and a path and outline <see cref="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="outlinePen">The pen to stroke the outline of the path with.</param>
            <param name="points">The points making up the ideal path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <param name="offset">The offset into the list of points that starts the path.</param>
            <param name="count">The number of points in the path.</param>
            <param name="strokeType">Whether to stroke just the path, the outline, or both.</param>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.OutlinePaths">
            <summary>
            Gets the outline paths that have been generated for this path.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.IndexCount">
            <inherit />
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.VertexCount">
            <inherit />
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.VertexPositionData">
            <inherit />
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.VertexTextureData">
            <inherit />
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.VertexColorData">
            <inherit />
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.IndexData">
            <inherit />
        </member>
        <member name="P:Sharp2D.Engine.Drawing.GraphicsPath.Pen">
            <inherit />
        </member>
        <member name="T:Sharp2D.Engine.Drawing.PathBuilder">
            <summary>
            An object for building up an ideal path from pieces.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.#ctor">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.PathBuilder"/> object.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.PathBuilder"/> object with a given initial buffer size.
            </summary>
            <param name="initialBufferSize">The initial size of the internal vertex buffer.</param>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.PathBuilder.Buffer">
            <summary>
            Gets the raw vertex buffer from the <see cref="T:Sharp2D.Engine.Drawing.PathBuilder"/>.
            </summary>
            <seealso cref="P:Sharp2D.Engine.Drawing.PathBuilder.LengthBuffer"/>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.PathBuilder.LengthBuffer">
            <summary>
            Gets the buffer containing the length of each vertex in the vertex buffer from the start of the path.
            </summary>
            <remarks><para>The length for the first vertex is always 0.</para></remarks>
            <seealso cref="P:Sharp2D.Engine.Drawing.PathBuilder.Buffer"/>
            <seealso cref="P:Sharp2D.Engine.Drawing.PathBuilder.CalculateLengths"/>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.PathBuilder.Count">
            <summary>
            Gets the number of vertices currently in the path and buffer.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.PathBuilder.CalculateLengths">
            <summary>
            Gets or sets whether lengths are calculated for line segments.
            </summary>
            <remarks><para>This property will be checked at the time a path is stroked to determine whether it can use length information or not.</para>
            <para>If this property is set to false during some or all of the path building operations, lengths for those sections may appear as any value.</para></remarks>
            <seealso cref="P:Sharp2D.Engine.Drawing.PathBuilder.LengthBuffer"/>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Appends a point to the end of the path.
            </summary>
            <param name="point">A point.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddPath(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Appends a list of points to the end of the path.
            </summary>
            <param name="points">A list of points.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddPath(Sharp2D.Engine.Drawing.PathBuilder)">
            <summary>
            Appends all of the points within another <see cref="T:Sharp2D.Engine.Drawing.PathBuilder"/> object to the end of the path.
            </summary>
            <param name="path">An existing path.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddLine(System.Single,System.Single)">
            <summary>
            Appends a point to the end of the path offset from the path's current endpoint by the given length and angle.
            </summary>
            <param name="length">The length of the line being added.</param>
            <param name="angle">The angle of the line in radians.  Positive values are clockwise.</param>
            <exception cref="T:System.InvalidOperationException">The path has no existing points.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArcByPoint(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Appends an arc between the current endpoint and given point to the end of the path.
            </summary>
            <param name="point">The endpoint of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting the path's current endpoint and <paramref name="point"/>.</param>
            <exception cref="T:System.InvalidOperationException">The path has no existing points.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArcByPoint(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Appends an arc between the current endpoint and given point to the end of the path.
            </summary>
            <param name="point">The endpoint of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting the path's current endpoint and <paramref name="point"/>.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same arc radius.</param>
            <exception cref="T:System.InvalidOperationException">The path has no existing points.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArcByAngle(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Appends an arc between the current endpoint and a point defined by a center and arc angle.
            </summary>
            <param name="center">The center of a circle containing the path's current endpoint and destination point.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <exception cref="T:System.InvalidOperationException">The path has no existing points.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArcByAngle(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Appends an arc between the current endpoint and a point defined by a center and arc angle.
            </summary>
            <param name="center">The center of a circle containing the path's current endpoint and destination point.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same arc radius.</param>
            <exception cref="T:System.InvalidOperationException">The path has no existing points.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArc(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Appends a fully-defined arc to the end of the path, connected by an additional line segment if the arc does not
            begin at the path's current endpoint.
            </summary>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArc(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Appends a fully-defined arc to the end of the path, connected by an additional line segment if the arc does not
            begin at the path's current endpoint.
            </summary>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same arc radius.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArc(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Appends a fully-defined arc to the end of the path, connected by an additional line segment if the arc does not
            begin at the path's current endpoint.
            </summary>
            <param name="p0">The starting point of the arc.</param>
            <param name="p1">The ending point of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting <paramref name="p0"/> and <paramref name="p1"/>.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddArc(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Appends a fully-defined arc to the end of the path, connected by an additional line segment if the arc does not
            begin at the path's current endpoint.
            </summary>
            <param name="p0">The starting point of the arc.</param>
            <param name="p1">The ending point of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting <paramref name="p0"/> and <paramref name="p1"/>.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same arc radius.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddBezier(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Appends a quadratic bezier curve to the end of the path, connected by an additional line segment if the curve does not
            begin at the path's current endpoint.
            </summary>
            <param name="p0">The starting point of the curve.</param>
            <param name="p1">The first control point of the curve.</param>
            <param name="p2">The ending point of the curve.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddBezier(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Appends a quadratic Bezier curve to the end of the path, connected by an additional line segment if the curve does not
            begin at the path's current endpoint.
            </summary>
            <param name="p0">The starting point of the curve.</param>
            <param name="p1">The first control point of the curve.</param>
            <param name="p2">The ending point of the curve.</param>
            <param name="subdivisions">The number of subdivisions in the curve.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddBezier(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Appends a cubic Bezier curve to the end of the path, connected by an additional line segment if the curve does not
            begin at the path's current endpoint.
            </summary>
            <param name="p0">The starting point of the curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The second control point.</param>
            <param name="p3">The ending point of the curve.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddBezier(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Appends a cubic Bezier curve to the end of the path, connected by an additional line segment if the curve does not
            begin at the path's current endpoint.
            </summary>
            <param name="p0">The starting point of the curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The second control point.</param>
            <param name="p3">The ending point of the curve.</param>
            <param name="subdivisions">The number of subdivisions in the curve.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddBeziers(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.BezierType)">
            <summary>
            Appends a series of Bezier curves to the end of the path, connected by an additional line segment if the first curve
            does not begin at the path's current endpoint.
            </summary>
            <param name="points">A list of points.</param>
            <param name="bezierType">The type of Bezier</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1.
            For cubic Bezier curves, the number of points defined by the parameters should be a multiple of 3 plus 1.  For each curve
            drawn after the first, the ending point of the previous curve is used as the starting point.</para></remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.AddBeziers(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32,Sharp2D.Engine.Drawing.BezierType)">
            <summary>
            Appends a series of Bezier curves to the end of the path, connected by an additional line segment if the first curve
            does not begin at the path's current endpoint.
            </summary>
            <param name="points">A list of points.</param>
            <param name="offset">The index of the first point to use from the list.</param>
            <param name="length">The number of points to use from the list.</param>
            <param name="bezierType">The type of Bezier</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1.
            For cubic Bezier curves, the number of points defined by the parameters should be a multiple of 3 plus 1.  For each curve
            drawn after the first, the ending point of the previous curve is used as the starting point.</para></remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.Stroke(Sharp2D.Engine.Drawing.Pen)">
            <summary>
            Creates an open <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/> from the path with a given <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <returns>A computed <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.Stroke(Sharp2D.Engine.Drawing.Pen,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Creates an open or closed <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/> from the path with a given <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <returns>A computed <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.Stroke(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates an open <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/> from a transformed copy of the path with a given <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="transform">The transform matrix to apply to all of the points in the path.</param>
            <returns>A computed <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.Stroke(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Matrix,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Creates an open or closed <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/> from a transformed copy of the path with a given <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.
            </summary>
            <param name="pen">The pen to stroke the path with.</param>
            <param name="transform">The transform matrix to apply to all of the points in the path.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <returns>A computed <see cref="T:Sharp2D.Engine.Drawing.GraphicsPath"/>.</returns>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PathBuilder.Reset">
            <summary>
            Resets the <see cref="T:Sharp2D.Engine.Drawing.PathBuilder"/> to empty.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.PrimitivePen">
            <summary>
            A <see cref="T:Sharp2D.Engine.Drawing.Pen"/> that can only have a solid color and width of 1.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.PrimitivePen.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.PrimitivePen"/> with the given color.
            </summary>
            <param name="color">The pen color.</param>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Pen">
            <summary>
            Objects used to draw paths.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Black">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Blue">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Brown">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Cyan">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkBlue">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkCyan">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkGoldenrod">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkGray">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkGreen">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkMagenta">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkOrange">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.DarkRed">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Goldenrod">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Gray">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Green">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LightBlue">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LightCyan">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LightGray">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LightGreen">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LightPink">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LightYellow">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Lime">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Magenta">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Orange">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Pink">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Purple">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Red">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Teal">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.White">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Yellow">
            <summary>A system-defined <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.</summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Color">
            <summary>
            Gets the solid color or blending color of the pen.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Brush">
            <summary>
            Gets the <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/> used to fill stroked paths.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Width">
            <summary>
            Gets or sets the width of the stroked path in graphical units (usually pixels).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.Alignment">
            <summary>
            Gets or sets the alignment of the stroked path relative to the ideal path being stroked.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.StartCap">
            <summary>
            Gets or sets how the start of a stroked path is terminated.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.EndCap">
            <summary>
            Gets or sets how the end of a stroked path is terminated.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.LineJoin">
            <summary>
            Gets or sets how the segments in the path are joined together.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
            <remarks><para>The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width. The default value is 10.0f.</para>
            <para>If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.</para></remarks>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.JoinLimit">
            <summary>
            Gets or sets the angle difference threshold in radians under which joins will be mitered instead of beveled or rounded.  
            Defaults to PI / 8 (11.25 degrees).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.OwnsBrush">
            <summary>
            Gets or sets whether this pen "owns" the brush used to construct it, and should therefor dispose the brush
            along with itself.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pen.NeedsPathLength">
            <summary>
            Gets whether this pen needs path length values to properly calculate values at each sample point on the path.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.#ctor(Sharp2D.Engine.Drawing.Brush,System.Single,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pen"/> with the given brush and width.
            </summary>
            <param name="brush">The <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/> used to stroke the pen.</param>
            <param name="width">The width of the paths drawn by the pen.</param>
            <param name="ownsBrush"><c>true</c> if the pen should be responsible for disposing the <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/>, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.#ctor(Sharp2D.Engine.Drawing.Brush,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pen"/> with the given brush and width.
            </summary>
            <param name="brush">The <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/> used to stroke the pen.</param>
            <param name="width">The width of the paths drawn by the pen.</param>
            <remarks>By default, the pen will not take resposibility for disposing the <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.#ctor(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pen"/> with the given color and width.
            </summary>
            <param name="color">The color used to stroke the pen.</param>
            <param name="width">The width of the paths drawn by the pen.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.#ctor(Sharp2D.Engine.Drawing.Brush)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pen"/> with the given brush and a width of 1.
            </summary>
            <param name="brush">The <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/> used to stroke the pen.</param>
            <remarks>By default, the pen will not take resposibility for disposing the <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.#ctor(Sharp2D.Engine.Drawing.Brush,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pen"/> with the given brush and a width of 1.
            </summary>
            <param name="brush">The <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/> used to stroke the pen.</param>
            <param name="ownsBrush"><c>true</c> if the pen should be responsible for disposing the <see cref="P:Sharp2D.Engine.Drawing.Pen.Brush"/>, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pen"/> with the given color and a width of 1.
            </summary>
            <param name="color">The color used to stroke the pen.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Sharp2D.Engine.Drawing.Pen"/> object.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.Finalize">
            <summary>
            Attempts to dispose unmanaged resources.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.DisposeManaged">
            <summary>
            Releases the managed resources used by the <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.DisposeUnmanaged">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pen.ColorAt(System.Single,System.Single,System.Single)">
            <summary>
            Queries the <see cref="T:Sharp2D.Engine.Drawing.Pen"/> for its color at a coordinate relative to the stroke width of the pen and length of the path.
            </summary>
            <param name="widthPosition">A value between 0 and 1 interpolated across the stroke width.</param>
            <param name="lengthPosition">A value between 0 and the full length of the path.</param>
            <param name="length">A scaling factor such that lengthPosition can be normalized to a value between 0 and 1.</param>
            <returns>A color value.</returns>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Pens.GradientPen">
            <summary>
            A <see cref="T:Sharp2D.Engine.Drawing.Pen"/> that blends two colors across its stroke width.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pens.GradientPen.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pens.GradientPen"/> with the given colors and width.
            </summary>
            <param name="color1">The first pen color.</param>
            <param name="color2">The second pen color.</param>
            <param name="width">The width of the paths drawn by the pen.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pens.GradientPen.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pens.GradientPen"/> with the given colors and a width of 1.
            </summary>
            <param name="color1">The first pen color.</param>
            <param name="color2">The second pen color.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pens.GradientPen.ColorAt(System.Single,System.Single,System.Single)">
            <InheritDoc />
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Pens.PathGradientPen">
            <summary>
            A <see cref="T:Sharp2D.Engine.Drawing.Pen"/> that blends two colors across the length of the stroked path.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pens.PathGradientPen.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pens.GradientPen"/> with the given colors and width.
            </summary>
            <param name="startColor">The starting pen color.</param>
            <param name="endColor">The ending pen color.</param>
            <param name="width">The width of the paths drawn by the pen.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pens.PathGradientPen.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Pens.GradientPen"/> with the given colors and a width of 1.
            </summary>
            <param name="startColor">The starting pen color.</param>
            <param name="endColor">The ending pen color.</param>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Pens.PathGradientPen.NeedsPathLength">
            <InheritDoc />
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Pens.PathGradientPen.ColorAt(System.Single,System.Single,System.Single)">
            <InheritDoc />
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Shapes.Grid">
            <summary>
            An object that compiles a low-level geometry cache for a grid.
            </summary>
            <remarks>Geometry compiled by a <see cref="T:Sharp2D.Engine.Drawing.Shapes.Grid"/> object does not overlap at intersections, unlike a grid rendered
            manually as a series of crossing lines.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Shapes.Grid.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.Shapes.Grid"/> object from the given columns and rows.
            </summary>
            <param name="columns">The number of columns in the grid.</param>
            <param name="rows">The number of rows in the grid.</param>
            <remarks><see cref="T:Sharp2D.Engine.Drawing.Shapes.Grid"/> objects initialize their memory buffers from the given column and row values.  A grid can
            be compiled any number of times without needing to allocate new buffers.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Shapes.Grid.Compile(Sharp2D.Engine.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Compiles the grid's geometry from the given <see cref="T:Sharp2D.Engine.Drawing.Pen"/> and overall dimensions into a <see cref="T:Sharp2D.Engine.Drawing.DrawCache"/> object.
            </summary>
            <param name="pen">The <see cref="T:Sharp2D.Engine.Drawing.Pen"/> to render the grid's lines with.</param>
            <param name="left">The ledge edge of the grid.</param>
            <param name="top">The top edge of the grid.</param>
            <param name="width">The width of the grid.</param>
            <param name="height">The height of the grid.</param>
            <returns>A <see cref="T:Sharp2D.Engine.Drawing.DrawCache"/> with the compiled geometry.</returns>
            <remarks>Only the most recently compiled <see cref="T:Sharp2D.Engine.Drawing.DrawCache"/> is valid for any given <see cref="T:Sharp2D.Engine.Drawing.Shapes.Grid"/>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.Dispose">
            <summary>
            Releases all resources used by the <see cref="!:DrawBatch"/> object.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.SharpDrawBatch.IsDisposed">
            <summary>
            Gets whether the <see cref="!:DrawBatch"/> has been disposed or not.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Computes and adds a rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="rect">The rectangle to be rendered.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>
            Computes and adds a rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="rect">The rectangle to be rendered.</param>
            <param name="angle">The angle to rotate the rectangle by around its center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Computes and adds a rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="location">The top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Computes and adds a rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="location">The top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="angle">The angle to rotate the rectangle by around its center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawQuad(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2[],System.Int32)">
            <summary>
            Computes and adds a quadrilateral path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="points">An array containing the coordinates of the quad.</param>
            <param name="offset">The offset into the points array.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawQuad</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawQuad(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Single)">
            <summary>
            Computes and adds a quadrilateral path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="points">An array containing the coordinates of the quad.</param>
            <param name="offset">The offset into the points array.</param>
            <param name="angle">The angle to rotate the quad by around its weighted center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawQuad</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Adds a primitive rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="rect">The rectangle to be rendered.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>
            Adds a primitive rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="rect">The rectangle to be rendered.</param>
            <param name="angle">The angle to rotate the rectangle by around its center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Adds a primitive rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="location">The top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveRectangle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Adds a primitive rectangle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="location">The top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="angle">The angle to rotate the rectangle by around its center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveQuad(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2[],System.Int32)">
            <summary>
            Adds a primitive quadrilateral to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="points">An array containing the coordinates of the quad.</param>
            <param name="offset">The offset into the points array.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveQuad</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveQuad(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Single)">
            <summary>
            Adds a primitive quadrilateral to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="points">An array containing the coordinates of the quad.</param>
            <param name="offset">The offset into the points array.</param>
            <param name="angle">The angle to rotate the quad by around its weighted center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveQuad</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPoint(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Computes and adds a point path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="point">The point to be rendered.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPoint</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawLine(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Computes and adds a line segment path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="p0">The first point of the line segment.</param>
            <param name="p1">The second point of the line segment.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawLine</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveLine(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a primitive line segment path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="p0">The first point of the line segment.</param>
            <param name="p1">The second point of the line segment.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveLine</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitivePath(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Adds a primitive multisegment path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="points">The list of points that make up the path to be rendered.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitivePath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitivePath(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Adds a primitive multisegment path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="points">The list of points that make up the path to be rendered.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitivePath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitivePath(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32)">
            <summary>
            Adds a primitive multisegment path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="points">The list of points that make up the path to be rendered.</param>
            <param name="offset">The offset into the <paramref name="points"/> list to begin rendering.</param>
            <param name="count">The number of points that should be rendered, starting from <paramref name="offset"/>.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitivePath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitivePath(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Adds a primitive multisegment path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying a color to render the path with.</param>
            <param name="points">The list of points that make up the path to be rendered.</param>
            <param name="offset">The offset into the <paramref name="points"/> list to begin rendering.</param>
            <param name="count">The number of points that should be rendered, starting from <paramref name="offset"/>.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitivePath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPath(Sharp2D.Engine.Drawing.GraphicsPath)">
            <summary>
            Adds a precomputed path to the batch of figures to be rendered.
            </summary>
            <param name="path">A path that has already been stroked with a <see cref="T:Sharp2D.Engine.Drawing.Pen"/>.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawCircle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Computes and adds a circle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center coordinate of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawCircle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the circle is computed as the radius / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawCircle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Computes and adds a circle path to the batch of figures to be rendered using a given number of subdivisions.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center coordinate of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the circle with.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawCircle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Computes and adds an ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>
            Computes and adds an ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle,System.Single,System.Int32)">
            <summary>
            Computes and adds an ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the ellipse with.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Computes and adds an ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the ellipse along the y-acis.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Computes and adds an ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the ellipse along the y-acis.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Computes and adds an ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the ellipse along the y-acis.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the ellipse with.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveCircle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a primitive circle path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center coordinate of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveCircle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the circle is computed as the radius / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveCircle(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Adds a primitive circle path to the batch of figures to be rendered using a given number of subdivisions.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center coordinate of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the circle with.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveCircle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Adds a primitive ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(width, height) / 3.0.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>
            Adds a primitive ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(width, height) / 3.0.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Rectangle,System.Single,System.Int32)">
            <summary>
            Adds a primitive ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the ellipse with.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Adds a primitive ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the ellipse along the y-acis.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Adds a primitive ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the ellipse along the y-acis.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveEllipse(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a primitive ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the ellipse along the y-acis.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the ellipse with.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Computes and adds an arc path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Computes and adds an arc path to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same radius.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>subdivisions * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Computes and adds an arc path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="p0">The starting point of the arc.</param>
            <param name="p1">The ending point of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting <paramref name="p0"/> and <paramref name="p1"/>.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Computes and adds an arc path to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="p0">The starting point of the arc.</param>
            <param name="p1">The ending point of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting <paramref name="p0"/> and <paramref name="p1"/>.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same arc radius.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(subdivisions) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Adds a primitive arc path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a primitive arc path to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same radius.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a primitive arc path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="p0">The starting point of the arc.</param>
            <param name="p1">The ending point of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting <paramref name="p0"/> and <paramref name="p1"/>.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Adds a primitive arc path to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="p0">The starting point of the arc.</param>
            <param name="p1">The ending point of the arc.</param>
            <param name="height">The furthest point on the arc from the line connecting <paramref name="p0"/> and <paramref name="p1"/>.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same arc radius.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(subdivisions) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveClosedArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Sharp2D.Engine.Drawing.ArcType)">
            <summary>
            Adds a closed primitive arc path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="arcType">Whether the arc is drawn as a segment or a sector.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveClosedArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveClosedArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Sharp2D.Engine.Drawing.ArcType,System.Int32)">
            <summary>
            Adds a closed primitive arc path to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="arcType">Whether the arc is drawn as a segment or a sector.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same radius.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveClosedArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(subdivisions * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawClosedArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Sharp2D.Engine.Drawing.ArcType)">
            <summary>
            Computes and adds a closed arc path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="arcType">Whether the arc is drawn as a segment or a sector.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawClosedArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawClosedArc(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Sharp2D.Engine.Drawing.ArcType,System.Int32)">
            <summary>
            Computes and adds a closed arc path to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="center">The center coordinate of the the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="arcType">Whether the arc is drawn as a segment or a sector.</param>
            <param name="subdivisions">The number of subdivisions in a circle of the same radius.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawClosedArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>subdivisions * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawBezier(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Computes and adds a quadratic Bezier path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="p0">The start point of the curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The end point of the curve.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawBezier</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawBezier(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Computes and adds a cubic Bezier path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="p0">The start point of the curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The second control point.</param>
            <param name="p3">The end point of the curve.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawBezier</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.BezierType)">
            <summary>
            Computes and adds a series of Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.BezierType,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Computes and adds a series of Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32,Sharp2D.Engine.Drawing.BezierType)">
            <summary>
            Computes and adds a series of Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="offset">The index of the first start point in the list.</param>
            <param name="count">The number of points to use.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32,Sharp2D.Engine.Drawing.BezierType,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Computes and adds a series of Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="offset">The index of the first start point in the list.</param>
            <param name="count">The number of points to use.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveBezier(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a primitive quadratic Bezier path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="p0">The start point of the curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The end point of the curve.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveBezier</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveBezier(Sharp2D.Engine.Drawing.Pen,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a primitive cubic Bezier path to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="p0">The start point of the curve.</param>
            <param name="p1">The first control point.</param>
            <param name="p2">The second control point.</param>
            <param name="p3">The end point of the curve.</param>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveBezier</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.BezierType)">
            <summary>
            Adds a series of primitive Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},Sharp2D.Engine.Drawing.BezierType,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Adds a series of primitive Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32,Sharp2D.Engine.Drawing.BezierType)">
            <summary>
            Adds a series of primitive Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="offset">The index of the first start point in the list.</param>
            <param name="count">The number of points to use.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawPrimitiveBeziers(Sharp2D.Engine.Drawing.Pen,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32,Sharp2D.Engine.Drawing.BezierType,Sharp2D.Engine.Drawing.PathType)">
            <summary>
            Adds a series of primitive Bezier paths to the batch of figures to be rendered.
            </summary>
            <param name="pen">The pen supplying the color to render the path with.</param>
            <param name="points">A list of Bezier points.</param>
            <param name="offset">The index of the first start point in the list.</param>
            <param name="count">The number of points to use.</param>
            <param name="bezierType">The type of Bezier curves to draw.</param>
            <param name="pathType">Whether the path is open or closed.</param>
            <remarks><para>For quadratic Bezier curves, the number of points defined by the parameters should be a multiple of 2 plus 1
            for open curves or 2 for closed curves.  For cubic Bezier curves, the number of points defined by the parameters should be 
            a multiple of 3 plus 1 for open curves or 3 for closed curves.  For each curve drawn after the first, the ending point of 
            the previous curve is used as the starting point.  For closed curves, the end point of the last curve is the start point
            of the first curve.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><c>DrawPrimitiveBeziers</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillCircle(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a filled circle to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillCircle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the circle is computed as <c>(radius / 1.5)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillCircle(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Adds a filled circle to the batch of figures to be rendered using the given number of subdivisions.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="subdivisions">The number of subdivisions to render the circle with.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillCircle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillEllipse(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Adds a filled ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(width, height) / 3.0.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillEllipse(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>
            Adds a filled ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(width, height) / 3.0.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillEllipse(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Rectangle,System.Single,System.Int32)">
            <summary>
            Adds a filled ellipse path to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="bound">The bounding rectangle of the ellipse.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <param name="subdivisions">The number of subdivisions (sides) to render the ellipse with.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillEllipse(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Adds a filled ellipse to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the llipse along the y-axis.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillEllipse(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Adds a filled ellipse to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the llipse along the y-axis.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the ellipse is computed as max(xRadius, yRadius) / 1.5.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillEllipse(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a filled ellipse to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the ellipse.</param>
            <param name="xRadius">The radius of the ellipse along the x-axis.</param>
            <param name="yRadius">The radius of the llipse along the y-axis.</param>
            <param name="angle">The angle to rotate the ellipse by in radians.  Positive values rotate clockwise.</param>
            <param name="subdivisions">The number of subdivisions to render the circle with.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillEllipse</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillArc(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Sharp2D.Engine.Drawing.ArcType)">
            <summary>
            Adds a filled arc to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="arcType">Whether the arc is drawn as a segment or a sector.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>(radius / 1.5) * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillArc(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Sharp2D.Engine.Drawing.ArcType,System.Int32)">
            <summary>
            Adds a filled arc to the batch of figures to be rendered using up to the given number of subdivisions.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="center">The center coordinate of the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The starting angle of the arc in radians, where 0 is 3 O'Clock.</param>
            <param name="arcAngle">The sweep of the arc in radians.  Positive values draw clockwise.</param>
            <param name="arcType">Whether the arc is drawn as a segment or a sector.</param>
            <param name="subdivisions">The number of subdivisions in the circle with the same radius as the arc.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillArc</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>The number of subdivisions in the arc is computed as <c>subdivisions * (arcAngle / 2PI)</c>.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillRectangle(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Adds a filled rectangle to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="rect">The rectangle to be rendered.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillRectangle(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>
            Adds a filled rectangle to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="rect">The rectangle to be rendered.</param>
            <param name="angle">The angle to rotate the rectangle by around its center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillRectangle(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Adds a filled rectangle to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="location">The top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillRectangle(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Adds a filled rectangle to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="location">The top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="angle">The angle to rotate the rectangle by around its center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillRectangle</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillQuad(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2[],System.Int32)">
            <summary>
            Adds a filled quadrilateral to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="points">An array containing the coordinates of the quad.</param>
            <param name="offset">The offset into the points array.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillQuad</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillQuad(Sharp2D.Engine.Drawing.Brush,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Single)">
            <summary>
            Adds a filled quadrilateral to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="points">An array containing the coordinates of the quad.</param>
            <param name="offset">The offset into the points array.</param>
            <param name="angle">The angle to rotate the quad around its weighted center in radians.  Positive values rotate clockwise.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillQuad</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillPath(Sharp2D.Engine.Drawing.Brush,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Adds a filled region enclosed by the given multisegment path to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="points">The list of points that make up the multisegment path enclosing the region.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillPath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>Paths should be created with a clockwise winding order, or the resulting geometry will be backface-culled.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.FillPath(Sharp2D.Engine.Drawing.Brush,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32)">
            <summary>
            Adds a filled region enclosed by the given multisegment path to the batch of figures to be rendered.
            </summary>
            <param name="brush">The brush to render the shape with.</param>
            <param name="points">The list of points that make up the multisegment path enclosing the region.</param>
            <param name="offset">The offset into the <paramref name="points"/> list to begin rendering.</param>
            <param name="count">The number of points that should be rendered, starting from <paramref name="offset"/>.</param>
            <exception cref="T:System.InvalidOperationException"><c>FillPath</c> was called, but <see cref="!:Begin()"/> has not yet been called.</exception>
            <remarks>Paths should be created with a clockwise winding order, or the resulting geometry will be backface-culled.</remarks>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawCache(Sharp2D.Engine.Drawing.DrawCache)">
            <summary>
            Immediatley renders a <see cref="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawCache(Sharp2D.Engine.Drawing.DrawCache)"/> object.
            </summary>
            <param name="cache">A <see cref="M:Sharp2D.Engine.Drawing.SharpDrawBatch.DrawCache(Sharp2D.Engine.Drawing.DrawCache)"/> object.</param>
            <remarks>Any previous unflushed geometry will be rendered first.</remarks>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.SolidColorBrush">
            <summary>
            A <see cref="T:Sharp2D.Engine.Drawing.Brush"/> that represents a solid color.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.SolidColorBrush.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.SolidColorBrush"/> from the given <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> and <see cref="P:Sharp2D.Engine.Drawing.SolidColorBrush.Color"/>.
            </summary>
            <param name="color">A color.</param>
            <remarks>The <see cref="P:Sharp2D.Engine.Drawing.Brush.Alpha"/> property of the brush is initialized 
            to the alpha value of the color.</remarks>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.SolidColorBrush.Color">
            <summary>
            The color of the brush.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Drawing.TextureBrush">
            <summary>
            A <see cref="T:Sharp2D.Engine.Drawing.Brush"/> that represents a texture.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.TextureBrush.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.TextureBrush"/> with the given texture.
            </summary>
            <param name="texture">A texture.</param>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.TextureBrush.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single)">
            <summary>
            Creates a new <see cref="T:Sharp2D.Engine.Drawing.TextureBrush"/> with the texture and opacity.
            </summary>
            <param name="texture">A texture.</param>
            <param name="opacity">The opacity to render the texture with.</param>
            <remarks>The <see cref="P:Sharp2D.Engine.Drawing.Brush.Alpha"/> property of the brush is intialized to the opacity value.
            When the brush is rendered, any opacity already present in the texture is blended with
            the opacity value.</remarks>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.TextureBrush.Texture">
            <summary>
            Gets or sets the texture resource of the brush.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.TextureBrush.Color">
            <summary>
            Gets or sets the color to blend with the texture.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.TextureBrush.Transform">
            <summary>
            Gets or sets the transformation to apply to brush.
            </summary>
            <remarks>The default transform for <see cref="T:Sharp2D.Engine.Drawing.TextureBrush"/> scales the resultant UV coordinates by
            the dimensions of the texture.</remarks>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.TextureBrush.OwnsTexture">
            <summary>
            Gets or sets whether this brush "owns" the texture used to construct it, and should therefor dispose the texture
            along with itself.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.TextureBrush.DisposeManaged">
            <inherit />
        </member>
        <member name="T:Sharp2D.Engine.Drawing.Triangulator">
            <summary>
            Computes a set of interior triangles from a set of points that defines a containing path.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Triangulator.ComputedIndexes">
            <summary>
            The indexes of triangle list entries for the list of points used in the last <see cref="M:Sharp2D.Engine.Drawing.Triangulator.Triangulate(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32)"/> call.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Drawing.Triangulator.ComputedIndexCount">
            <summary>
            The number of indexes generated in the last computation.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Drawing.Triangulator.Triangulate(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32)">
            <summary>
            Computes a triangle list that fully covers the area enclosed by the given set of points.
            </summary>
            <param name="points">A list of points that defines an enclosing path.</param>
            <param name="offset">The offset of the first point in the list.</param>
            <param name="count">The number of points in the path.</param>
        </member>
        <member name="T:Sharp2D.Engine.Helper.ClippingHelper">
            <summary>
                The clipping helper.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.ClippingHelper.GetRectangle(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Common.ObjectSystem.Rectanglef@)">
            <summary>
            Calculates whether or not to draw the scissor rectangle,
                and returns a boolean value representing if it should be drawn.
                <para>
            <see cref="!:scissorRectangle"/> will be modified to fit the new size, IF the method returns true.
                </para>
            </summary>
            <param name="currentRect">
            The current rectangle of the GraphicsDevice Scissor.
            </param>
            <param name="scissorRectangle">
            The new rectangle to use to cut off from..
            </param>
            <returns>
            Returns a boolean value representing if the <see cref="!:scissorRectangle"/> is at least partially within the
                rectangle of
                <see cref="!:currentRect"/>
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Helper.GameObjectExtensions">
            <summary>
                The game object extensions.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.GetAllChildren(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Returns a collection of all the children of the specified <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <remarks>
            This is a recursive call.
            </remarks>
            <returns>
            The <see cref="!:IEnumerable"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.GetRoot(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Gets the root object.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.IsAncestorOf(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines whether the specified <see cref="!:source"/> <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/> is an ancestor of the
                <see cref="!:child"/>
                .
            </summary>
            <param name="source">
            The source (is this an ancestor for <see cref="!:child"/>?.
            </param>
            <param name="child">
            The child.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.IsDescendantOf(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines whether the specified <see cref="!:source"/> is a descendant
                of the specified <see cref="!:parent"/>
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="parent">
            The parent.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.IsValidParentFor(Sharp2D.Engine.Common.ObjectSystem.GameObject,Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Determines whether the specified <see cref="!:source"/> is valid parent for the specified <see cref="!:child"/>
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="child">
            The child.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.RecursiveWhere(Sharp2D.Engine.Common.ObjectSystem.GameObject,System.Func{Sharp2D.Engine.Common.ObjectSystem.GameObject,System.Boolean})">
            <summary>
            Recursively tests the predicate against all (grand)children of <see cref="!:root"/>.
            </summary>
            <param name="root">
            The root.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <returns>
            The <see cref="!:IEnumerable"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.GameObjectExtensions.TraceRoot(Sharp2D.Engine.Common.ObjectSystem.GameObject,System.Collections.Generic.IList{Sharp2D.Engine.Common.ObjectSystem.GameObject}@)">
            <summary>
            Backtraces to the source's root object.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="backtrace">
            The backtrace.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Common.ObjectSystem.GameObject"/>.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Helper.LabelHelper">
            <summary>
                Helper methods for labels.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.LabelHelper.Center(Sharp2D.Engine.Common.UI.Controls.Label)">
            <summary>
            Centers the label.
            </summary>
            <param name="label">
            The label.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Helper.RectangleExtensions">
            <summary>
                Rectangle extension methods.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.RectangleExtensions.IsPointerInRegion(Sharp2D.Engine.Common.ObjectSystem.Rectanglef,Sharp2D.Engine.Infrastructure.Input.IPointerDevice,System.Single)">
            <summary>
            Determines whether the mouse is in the specified region. Uses <see cref="T:Sharp2D.Engine.Utility.InputManager" /><para>This also takes into account the screen resolution.</para>
            </summary>
            <param name="region">The region.</param>
            <param name="device">The device.</param>
            <param name="rotation">The rotation.</param>
            <returns>
              <c>True</c> if the mouse position is in the specified region.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Helper.SharpMathHelper">
            <summary>
                A tool for assistance in mathematical situations all around the engine
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.SharpMathHelper.GetPercentage(System.Single,System.Single,System.Single)">
            <summary>
            Gets the percentage value based on the <see cref="!:current" /> difference between <see cref="!:min" /> and
            <see cref="!:max" />
            </summary>
            <example>Current is 0, min is -5, max is 5. The return value would be 50</example>
            <param name="min">The minimum value.</param>
            <param name="current">The current value.</param>
            <param name="max">The maximum value.</param>
            <returns>
            Returns the percentage value.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.SharpMathHelper.Loop(System.Single,System.Single,System.Single)">
            <summary>
            Maps a value to be within the Min and Max value.
            </summary>
            <example>Min is 50, max is 150, value is 200. Return value will be 100, because 'value - (max - min) == 100'</example>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.SharpMathHelper.Rotate(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Rotates the specified point around the origin, returning the new position.
            <para>This should technically always be the same distance away from origin as before, however the return value will be different.</para>
            </summary>
            <param name="pointToRotate">The point.</param>
            <param name="centerPoint">The origin.</param>
            <param name="angleDegree">The angle degree.</param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.SharpMathHelper.SetPercentage(System.Single,System.Single,System.Single,System.Single@)">
            <summary>
            Sets the absolute value based on the <see cref="!:percentage" /> difference between <see cref="!:min" /> and
            <see cref="!:max" />
            </summary>
            <param name="percentage">The percentage value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="value">Outputs the value.</param>
        </member>
        <member name="T:Sharp2D.Engine.Helper.SpriteHelper">
            <summary>
                Sprite Helper methods.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.SpriteHelper.CreateRegionKeysBySpriteCount(System.Int32)">
            <summary>
            Creates the region keys by Sprite count in a Sprite sheet.
            </summary>
            <param name="count">
            The count.
            </param>
            <returns>
            The <see cref="!:int[]"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.SpriteHelper.CreateRegions``1(System.String,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates the Sprite regions for a Sprite sheet. Intelligent as fuck.
            </summary>
            <typeparam name="TSpriteKey">The type of the Sprite key.</typeparam>
            <param name="assetPath">The asset path.</param>
            <param name="spriteSize">Size of each individual Sprite.</param>
            <param name="width">The width of the spritesheet.</param>
            <param name="height">The height of the spritesheet.</param>
            <param name="regionKeys">The region keys.</param>
            <param name="margin">The margin.</param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Utility.SpriteRegions" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            You cannot create regions with a zero X or Y spritesize!
            or
            There appears to be more region keys than sprites. Do the math.
            </exception>
            <exception cref="T:System.InvalidOperationException">You cannot create regions with a zero X or Y Sprite size!
            or
            There appears to be more region keys than sprites. Do the math.</exception>
        </member>
        <member name="T:Sharp2D.Engine.Helper.UiContainerHelper">
            <summary>
                UIManager Helpers.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Helper.UiContainerHelper.FindNextFocusableControl">
            <summary>
                Finds the next focusable control. Does NOT focus it!
                The idea is to mimic Windows' Tab with focusable controls.
            </summary>
            <returns>
                The <see cref="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Helper.UiContainerHelper.FindPreviousFocusableControl">
            <summary>
                Finds the previous focusable control. Does NOT focus is.
                The idea is to mimic Windows' Shift+Tab with focusable controls.
            </summary>
            <returns>
                The <see cref="T:Sharp2D.Engine.Common.UI.Controls.InteractableUiControl" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                There is no instance of Scene available. (Scene.Current was null)
            </exception>
        </member>
        <member name="M:Sharp2D.Engine.Helper.UiContainerHelper.FocusableControlsPredicate(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            Predicate for determining if a GameObject is focusable.
            </summary>
            <param name="gameObject">
            The game object.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Particles.Particle">
            <summary>
                The particle.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Particles.Particle.startDuration">
            <summary>
                The _start duration.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Particles.Particle.#ctor(Microsoft.Xna.Framework.Vector2,Sharp2D.Engine.Common.Components.Sprites.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Particles.Particle"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="texture">
            The texture.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.Angle">
            <summary>
                Gets or sets the angle.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.AngularVelocity">
            <summary>
                Gets or sets the angular velocity.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.Duration">
            <summary>
                Gets the duration.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.EndColor">
            <summary>
                Gets or sets the end color.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.StartColor">
            <summary>
                Gets or sets the start color.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.StartDuration">
            <summary>
                Gets or sets the start duration.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.Particle.Velocity">
            <summary>
                Gets or sets the velocity.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Particles.Particle.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The update.
            </summary>
            <param name="time">
                The time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Particles.ParticleEmitter">
            <summary>
                The particle emitter.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Particles.ParticleEmitter.rnd">
            <summary>
                The rnd.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Particles.ParticleEmitter.#ctor(Sharp2D.Engine.Common.ObjectSystem.GameObject,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Particles.ParticleEmitter"/> class.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="sprites">
            The sprites.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Particles.ParticleEmitter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Particles.ParticleEmitter" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.ParticleEmitter.Area">
            <summary>
                Gets or sets the area.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.ParticleEmitter.HowToParticle">
            <summary>
                Gets or sets the how to particle.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.ParticleEmitter.Particles">
            <summary>
                Gets the particles.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.ParticleEmitter.Sprites">
            <summary>
                Gets or sets the sprites.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.ParticleEmitter.Target">
            <summary>
                Gets or sets the target.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Particles.ParticleEmitter.AddParticle">
            <summary>
                The add particle.
            </summary>
            <returns>
                The <see cref="T:Sharp2D.Engine.Particles.Particle" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Particles.ParticleEmitter.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The update.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="T:Sharp2D.Engine.Particles.ParticleEngine">
            <summary>
                The particle engine.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Particles.ParticleEngine.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Particles.ParticleEngine" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Particles.ParticleEngine.Emitters">
            <summary>
                Gets the emitters.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Particles.ParticleEngine.CreateEmitter(Sharp2D.Engine.Common.ObjectSystem.GameObject)">
            <summary>
            The create emitter.
            </summary>
            <param name="target">
            The target.
            </param>
            <returns>
            The <see cref="T:Sharp2D.Engine.Particles.ParticleEmitter"/>.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Utility.ConvertUnits">
            <summary>
                Convert units between display and simulation units.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Utility.FontDefinition">
            <summary>
                The font definition.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FontDefinition.font">
            <summary>
                The _font.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FontDefinition.fontPath">
            <summary>
                The _font path.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FontDefinition.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Sharp2D.Engine.Utility.FontDefinition" /> class.
                Initializes a new empty instance of the <see cref="T:Sharp2D.Engine.Utility.FontDefinition" /> class.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FontDefinition.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Sharp2D.Engine.Utility.FontDefinition"/> class.
            </summary>
            <param name="fontPath">
            The font path.
            </param>
            <param name="originalSize">
            Size of the original.
            </param>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FontDefinition.FontPath">
            <summary>
                Gets or sets the font path.
            </summary>
            <value>
                The font path.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FontDefinition.OriginalSize">
            <summary>
                Gets or sets the original size of the font provided.
            </summary>
            <value>
                The original size of the font.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FontDefinition.GetFont">
            <summary>
                Gets the font this font definition uses.
            </summary>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FontDefinition.GetScale(System.Single)">
            <summary>
            Gets the scaling ratio of the Default Font size compared to the font size provided.
            </summary>
            <param name="fontSize">
            Size of the font.
            </param>
            <returns>
            Returns a floating point value representing the difference between the two font sizes.
            </returns>
        </member>
        <member name="T:Sharp2D.Engine.Utility.FrameCounter">
            <summary>
                Frame Counter, for getting FPS in the game.
            </summary>
            <author>
                Original source code from CraftWorkGames: http://stackoverflow.com/users/1596973/craftworkgames
                Modified by Jeff Hansen.
            </author>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FrameCounter.MaximumSamples">
            <summary>
                The maximum amount of samples to average on.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FrameCounter.Instance">
            <summary>
                A singleton instance.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FrameCounter.sampleBuffer">
            <summary>
                The _sample buffer.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FrameCounter.realFrameCounter">
            <summary>
                The _real Frame counter.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.FrameCounter.elapsed">
            <summary>
                The elapsed.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FrameCounter.AverageFramesPerSecond">
            <summary>
                Gets the average frames per second.
            </summary>
            <value>
                The average frames per second.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FrameCounter.CurrentFramesPerSecond">
            <summary>
                Gets the current frames per second.
            </summary>
            <value>
                The current frames per second.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FrameCounter.RealFramesPerSecond">
            <summary>
                Gets the real frames per second.
            </summary>
            <value>
                The real frames per second.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FrameCounter.TotalFrames">
            <summary>
                Gets the total frames.
            </summary>
            <value>
                The total frames.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Utility.FrameCounter.TotalSeconds">
            <summary>
                Gets the total seconds.
            </summary>
            <value>
                The total seconds.
            </value>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FrameCounter.GetAverageFramesPerSecond">
            <summary>
                Gets the average frames per second.
            </summary>
            <value>
                The average frames per second.
            </value>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FrameCounter.GetRealFramesPerSecond">
            <summary>
                Gets the real frames per second.
                That is, how many calls to draw were called in the last second.
            </summary>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FrameCounter.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the singleton instance. Call this from within a Draw call.
            </summary>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FrameCounter.UpdateAverage(System.Single)">
            <summary>
            Runs the magic that calculates the current average FPS.
            </summary>
            <param name="deltaTime">
            The delta time.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.FrameCounter.UpdateReal(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the real.
            </summary>
            <param name="time">
            The time.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Utility.InputManager">
            <summary>
                Represents the current and previous state of input devices.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.KeyPulses">
            <summary>
                this many updates will occur between two consecutive true returns of IsKeyPulsed
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.AllKeys">
            <summary>
                The all keys.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.KeyList">
            <summary>
                The key list.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.keyPulses">
            <summary>
                The key pulses.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.LeftDoubleClickTimeMax">
            <summary>
                The left double click time max.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.MiddleDoubleClickTimeMax">
            <summary>
                The middle double click time max.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.PulsingKeys">
            <summary>
                The pulsing keys.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.RightDoubleClickTimeMax">
            <summary>
                The right double click time max.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.deltaX">
            <summary>
                The delta x.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.deltaY">
            <summary>
                The delta y.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.leftClickCount">
            <summary>
                The left click count.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.leftDoubleClickTime">
            <summary>
                The left double click time.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.middleClickCount">
            <summary>
                The middle click count.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.middleDoubleClickTime">
            <summary>
                The middle double click time.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.rightClickCount">
            <summary>
                The right click count.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.InputManager.rightDoubleClickTime">
            <summary>
                The right double click time.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.#cctor">
            <summary>
                Initializes static members of the <see cref="T:Sharp2D.Engine.Utility.InputManager" /> class.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.DeltaScroll">
            <summary>
                Gets the change in the value of the mouse scroll wheel.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.DeltaX">
            <summary>
                Gets the change in the horizontal position of the mouse cursor.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.DeltaY">
            <summary>
                Gets the change in the vertical position of the mouse cursor.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsLeftButtonClicked">
            <summary>
                Returns whether the left mouse button was clicked (previously pressed, but now released).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsLeftButtonDoubleClick">
            <summary>
                Returns whether the left mouse button was double clicked.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsLeftButtonDown">
            <summary>
                Returns whether the left mouse button is down.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsLeftButtonPressed">
            <summary>
                Returns whether the left mouse button was pressed (previously up, but now down).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsMiddleButtonClicked">
            <summary>
                Returns whether the middle mouse button was clicked (previously pressed, but now released).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsMiddleButtonDoubleClick">
            <summary>
                Returns whether the middle mouse button was double clicked.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsMiddleButtonDown">
            <summary>
                Returns whether the middle mouse button is held.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsMiddleButtonPressed">
            <summary>
                Returns whether the middle mouse button was pressed (previously up, but now down).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsMouseVisible">
            <summary>
                Gets or sets the visibility of the cursor.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsRightButtonClicked">
            <summary>
                Returns whether the right mouse button was clicked (previously pressed, but now released).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsRightButtonDoubleClick">
            <summary>
                Returns whether the right mouse button was double clicked.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsRightButtonDown">
            <summary>
                Returns whether the right mouse button is held.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsRightButtonPressed">
            <summary>
                Returns whether the left mouse button was pressed (previously up, but now down).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsXButton1Clicked">
            <summary>
                Returns whether XBUTTON1 was clicked (previously pressed, but now released).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.IsXButton2Clicked">
            <summary>
                Returns whether XBUTTON2 was clicked (previously pressed, but now released).
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.Keyboard">
            <summary>
                Gets the current keyboard state.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.Mouse">
            <summary>
                Gets the current mouse state.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.MousePosition">
            <summary>
                Gets the mouse position in vector2 coordinates.
            </summary>
            <value>
                The mouse position.
            </value>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.MouseScale">
            <summary>
                Gets or sets the scale to apply to mouse cursor coordinates.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.OldKeyboard">
            <summary>
                Gets the previous keyboard state.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.OldMouse">
            <summary>
                Gets the previous mouse state.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.ScaledCursor">
            <summary>
                Gets the position of the mouse cursor, with scaling applied.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.ScaledCursorF">
            <summary>
                Gets the position of the mouse cursor, with scaling applied.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.ScaledX">
            <summary>
                Gets the horizontal position of the mouse cursor, with scaling applied.
            </summary>
        </member>
        <member name="P:Sharp2D.Engine.Utility.InputManager.ScaledY">
            <summary>
                Gets the vertical position of the mouse cursor, with scaling applied.
            </summary>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.GetHeldKeys">
            <summary>
                Gets an array of values that correspond to the keyboard keys that are currently being held down.
            </summary>
            <returns>Returns an array of values that correspond to the keyboard keys that are currently being held down.</returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.GetInput(System.String@)">
            <summary>
            Returns a modified string where all the pressed keys are applied to the referenced string value.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.GetPressedKeys">
            <summary>
                Gets an array of values that correspond to the keyboard keys that have been pressed (were up, but are now down).
            </summary>
            <returns>
                Returns an array of values that correspond to the keyboard keys that have been pressed (were up, but are now down).
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.GetPulsedKeys">
            <summary>
                The get pulsed keys.
            </summary>
            <returns>
                The <see cref="!:Keys[]" />.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.GetReleasedKeys">
            <summary>
                Gets an array of values that correspond to the keyboard keys that have been released (were down, but are now up).
            </summary>
            <returns>
                Returns an array of values that correspond to the keyboard keys that have been pressed (were down, but are now up).
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.IsKeyDown(System.Nullable{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Returns whether a specific key is down.
            </summary>
            <param name="key">
            Enumerated value that specifies the key to query.
            </param>
            <returns>
            Returns true if the key is down; otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.IsKeyHeld(System.Nullable{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Returns whether a specific key is held.
            </summary>
            <param name="key">
            Enumerated value that specifies the key to query.
            </param>
            <returns>
            Returns true if the key is held down; otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.IsKeyPressed(System.Nullable{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Returns whether a specific key was pressed (previously up, but now down).
            </summary>
            <param name="key">
            Enumerated value that specifies the key to query.
            </param>
            <returns>
            Returns true if the key was previously up, but is now down; otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.IsKeyReleased(System.Nullable{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Returns whether a specific key was released (previously down, but now up).
            </summary>
            <param name="key">
            Enumerated value that specifies the key to query.
            </param>
            <returns>
            Returns true if the key was previously down, but is now up; otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.IsKeyUp(System.Nullable{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            Returns whether a specific key is up.
            </summary>
            <param name="key">
            Enumerated value that specifies the key to query.
            </param>
            <returns>
            Returns true if the key is up; otherwise, false.
            </returns>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the input state of all devices.
            </summary>
            <param name="gameTime">
            The game Time.
            </param>
        </member>
        <member name="M:Sharp2D.Engine.Utility.InputManager.getInput(Microsoft.Xna.Framework.Input.Keys[],System.String@)">
            <summary>
            The get input.
            </summary>
            <param name="pressedKeys">
            The pressed keys.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Sharp2D.Engine.Utility.CursorState">
            <summary>
                The cursor state.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.CursorState.Standard">
            <summary>
                The standard.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.CursorState.Pressed">
            <summary>
                The pressed.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.CursorState.Disabled">
            <summary>
                The disabled.
            </summary>
        </member>
        <member name="T:Sharp2D.Engine.Utility.SpriteRegions`1">
            <summary>
            Sprite Region dictionary.
            </summary>
            <typeparam name="TSpriteKey">
            The type of the Sprite key.
            </typeparam>
        </member>
        <member name="T:Sharp2D.Engine.Utility.SpriteRegions">
            <summary>
                Sprite Region defaults.
            </summary>
        </member>
        <member name="F:Sharp2D.Engine.Utility.SpriteRegions.InteractableUiControlDefaults">
            <summary>
                The interactable UI control state region defaults.
            </summary>
        </member>
    </members>
</doc>
